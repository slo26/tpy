<?php
use \Drupal\field\Entity\FieldConfig;
use \Drupal\Core\Session;
use \Drupal\Core\Session\SessionManager;

/**
 * Implements hook_page_preprocess_html().
 * @ignore
 */
function common_utils_preprocess_html(&$variables) {
    //Add JS and CSS library
    $variables['#attached']['library'][] = 'common_utils/common_utils';
}

/**
 * To get storage setting from Text List field type.
 *
 * @param string $field_name node field name
 * @param string $content_type - content type machine name
 * @return array|null - storage setting in array
 *
 */
function getFieldStorageSettingsAllowedValues($field_name, $content_type) {
    try {   
        $settings = FieldConfig::load('node.'.$content_type.'.'.$field_name)->getFieldStorageDefinition()->getSettings();
        return $settings['allowed_values'];
    } catch (Exeption $ex) {
        return null;
    }
}

/**
 * get key by providing label from Text List field type.
 *
 * @param entity $entity - entity object
 * @param string $field_name - entity field machine name
 * @param string $value - label
 * @return string|null - key
 *
 */
function get_entity_storage_key($entity, $field_name, $value) {
    if ( $entity->$field_name != null ) {
        $allowed_values = $entity->$field_name->getSetting('allowed_values');
        foreach ($allowed_values as $key => $label) {
            if ( $value == $label ) {
                return $key;
            }
        }
    }
    return null;
}

/**
 * get label by providing key from Text List field type.
 *
 * @param entity $entity - entity object
 * @param string $field_name - entity field machine name
 * @param string $value - label
 * @return string|null - label
 *
 */
function get_entity_storage_label($entity, $field_name, $value) {
    if ( $entity->$field_name != null ) {
        $allowed_values = $entity->$field_name->getSetting('allowed_values');
        foreach ($allowed_values as $key => $label) {
            if ( $value == $key ) {
                return $label;
            }
        }
    }
    return null;
}

/**
 * get goods or product name by providing nid.
 *
 * @param int $goods_nid - node id
 * @return string - good name or product name
 *
 */
function get_goods_name_by_nid($goods_nid) {
    $goods = \Drupal\node\Entity\Node::load($goods_nid);
    if ( $goods->bundle() == "goods" ) {
        return $goods->field_goods_name->value;
    } else {
        return $goods->field_product_name->value; //product
    }
}

/**
 * get product name by providing nid.
 *
 * @param int $product_nid - node id
 * @return string - product name
 *
 */
function get_product_name_by_nid($product_nid) {
    $product = \Drupal\node\Entity\Node::load($product_nid);
    return $product->field_product_name->value;
}

/**
 * get storage name by providing nid.
 *
 * @param int $storage_nid - node id
 * @return string - storage name
 *
 */
function get_storage_name_by_nid($storage_nid) {
    $storage = \Drupal\node\Entity\Node::load($storage_nid);
    if ( empty($storage->field_storage_name->value) ) {
        return "";
    }
    return $storage->field_storage_name->value;
}

/**
 * get storage nid by providing storage title.
 *
 * @param string $storage_title - node title
 * @return string - storage nid
 *
 */
function get_storage_nid_by_title($storage_title) {
    $storage_nids = \Drupal::entityQuery("node")->condition('type', 'storage')->condition('title', $storage_title)->execute();
    if ( empty($storage_nids) ) {
        return -1;
    } else {
        foreach($storage_nids as $storage_nid) {
            return $storage_nid;
        }
    }
}

/**
 * get sell order name by providing nid.
 *
 * @param int $order_nid - node id
 * @return string - sell order name
 *
 */
function get_sell_order_number_by_nid($order_nid) {
    $order = \Drupal\node\Entity\Node::load($order_nid);
    return $order->title->value;
}

/**
 * get purchase order name by providing nid.
 *
 * @param int $order_nid - node id
 * @return string - purchase order name
 *
 */
function get_purchase_order_number_by_nid($order_nid) {
    $order = \Drupal\node\Entity\Node::load($order_nid);
    return $order->title->value;
}

/**
 * get storage name by storage id (倉庫編號).
 *
 * @param string $storage_id - storage id
 * @return string - storage name
 *
 */
function get_storage_name($storage_id) {
    $connection = \Drupal::database();
    $storage_nids = \Drupal::entityQuery("node")
                        ->condition('type', 'storage')
                        ->condition('title', $storage_id)
                        ->execute();

    if ( count($storage_nids) == 0 ) return null;

    foreach($storage_nids as $storage_nid) {
        $storage = $connection->query("SELECT field_storage_name_value FROM {node__field_storage_name} Where 
                                                                                entity_id = :nid", 
                                                                                [':nid' => $storage_nid])->fetchAll();
        return $storage[0]->field_storage_name_value;
    }
}

/**
 * find product where storage at by product nid.
 *
 * @param int $product_nid - product nid
 * @return array - storage nids where has product
 *
 */
function find_product_nid_where_storage_at($product_nid) {
    $storage_nids = array();
    
    $stock_up_nids = \Drupal::entityQuery("node")
                        ->condition('type', 'stock_up')
                        ->condition('field_product_goods', $product_nid)
                        ->execute();
    foreach ($stock_up_nids as $stock_up_nid) {
        $stock_up = \Drupal\node\Entity\Node::load($stock_up_nid);
        $storage_nids[] = $stock_up->field_storage_id->target_id;
    }
    return $storage_nids;
}

/**
 * get host name.
 *
 * @return void
 *
 */
function get_hostname() {
    $config = \Drupal::config ( 'common_utils.settings' );
    $hostname = $config->get('hostname');

    return $hostname;
}

/**
 * get product or goods name by providing nid.
 *
 * @param int $nid - nid
 * @return string - product name or goods name
 *
 */
function get_product_or_goods_name_by_nid($nid) {
    $node = \Drupal\node\Entity\Node::load($nid);
    if ( $node != null && $node->getType() == "goods" ) {
        return $node->field_goods_name->value;
    } else if ( $node != null && $node->getType() == "product" ) {
        return $node->field_product_name->value;
    }
    
    return "";
}

/**
 * get product or goods model by providing nid.
 *
 * @param int $nid - nid
 * @return string - product name or goods model
 *
 */
function get_product_or_goods_model_by_nid($nid) {
    $node = \Drupal\node\Entity\Node::load($nid);
    return $node->title->value;
}

/**
 * check the current user has permission to read gross profit margin.
 *
 * @return bool - true or false
 *
 */
function view_gross_profit_margin() {
    $config = \Drupal::config ( 'common_utils.settings' );
    $auth = explode(",", $config->get('view_gross_profit_margin_info'));

    $current_user = \Drupal::currentUser();
    $roles = $current_user->getRoles();

    foreach($roles as $userRole) {
        if ( in_array($userRole, $auth) ) {
            return true;
        }
    }
    return false;
}

/**
 * get 商業營業稅.
 *
 * @return void
 *
 */
function get_business_tax() {
    $config = \Drupal::config ( 'common_utils.settings' );
    $business_tax = $config->get('sales_tax');
    return $business_tax;
}

/**
 * create warehouse activiity in the transaction log.
 *
 * @param int $item_nid - product nid or goods nid
 * @param int $from_storage_nid - from storage nid
 * @param int $to_storage_nid - to storage nid
 * @param string $trans_type - transaction type
 * @param int $quantity - transaction quantity
 * @param int $before_trans - before transaction quantity
 * @param int $after_trans - after transaction quantity
 * @param string $source - transaction soruce
 * @param string $trans_time - transaction time
 * @return void
 *
 */
function create_warehouse_transaction_log($item_nid, $from_storage_nid, $to_storage_nid, $trans_type, $quantity, $before_trans, $after_trans, $source, $trans_time) {
    $transaction = \Drupal\taxonomy\Entity\Term::create(['vid' => 'inventory_transaction']);
    if ( empty($trans_time) ) {
        $time = strtotime(date("Y-m-d H:i"));    
    } else {
        $time = strtotime($trans_time);
    }
    $transaction->set('name', \Drupal::service('date.formatter')->format($time, 'custom', 'Y-m-d H:i'));
    $transaction->set('field_source', $source);
    if ( !empty($to_storage_nid) ) {
        $transaction->set('field_to_storage', $to_storage_nid);
    }
    if ( !empty($from_storage_nid) ) {
        $transaction->set('field_from_storage', $from_storage_nid);
    }
    
    $transaction->set('field_quantity', $quantity);
    $transaction->set('field_inventory_transaction_type', $trans_type);
    $transaction->set('field_product_goods', $item_nid);
    $transaction->set('field_before_transaction', $before_trans);
    $transaction->set('field_after_transaction', $after_trans);
    $transaction->save();
}

/**
 * Convert century year to the year is used by R.O.Convert
 *
 * @para string $century_date - year/month/day in century year
 * @para string $separator_to_parse - separator to parse in century year
 * @para string $separator_to_print - separator to print in Republic Era
 * @return string - date in Republic Era
 */
 function centuryToRepublicEra($century_date, $separator_to_parse, $separator_to_print) {
     $date_arr = explode($separator_to_parse, $century_date);
     $year = $date_arr[0];
     return ($year - 1911) . $separator_to_print . $date_arr[1] . $separator_to_print . $date_arr[2];
 }

 function getStorageNidBasedonType($type) {
     $storages = \Drupal::entityQuery("node")->condition('type', 'storage')->condition('field_type_of_storage', $type)->execute();
     return $storages;
 }





