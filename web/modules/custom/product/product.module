<?php
use \Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\InvokeCommand;
use Drupal\Core\Ajax\HtmlCommand;
use Drupal\Core\Ajax;
use \Drupal\node\Entity\Node;
use Drupal\webform\WebformInterface;
use Drupal\webform\Plugin\WebformHandlerBase;
use Drupal\webform\webformSubmissionInterface;
use Drupal\webform\Entity\WebformSubmission;

/**
 * @ignore
 */
function product_node_presave(Drupal\Core\Entity\EntityInterface $node) {
    if ( $node->type->target_id == "product" ) {
        $dealer_price = $node->field_dealer_price->value;
        $retail_price = $node->field_retail_price->value;
        $construction_price = $node->field_construction_price->value;
        $cost = $node->field_cost_price->value;

        $gpm = calculate_gpm_for_product($construction_price, $cost);
        $node->set('field_gpm_for_construction', $gpm);
        $gpm = calculate_gpm_for_product($retail_price, $cost);
        $node->set('field_gpm_for_retailer', $gpm);
        $gpm = calculate_gpm_for_product($dealer_price, $cost);
        $node->set('field_gpm_for_vendor', $gpm);
    }
}

/**
 * @ignore
 */
function product_form_alter(&$form, FormStateInterface &$form_state, $form_id) {
    if ( $form_id == "node_product_form" || $form_id == "node_product_edit_form" ) {
        $node = $form_state->getFormObject()->getEntity();

        $form['field_gpm_for_construction']['#access'] = view_gross_profit_margin();
        $form['field_gpm_for_vendor']['#access'] = view_gross_profit_margin();
        $form['field_gpm_for_retailer']['#access'] = view_gross_profit_margin();

        $form['title']['widget'][0]['value']['#ajax'] = array(
                'callback' => 'ajax_check_unique_id',
				'event' => 'change',
        );

        $form['title_message'] = array(
			'#type' => 'markup',
			'#markup' => '<div class="title-message"></div>',
            '#weight' => 3,
        );

        $form['field_product_name']['widget'][0]['value']['#ajax'] = array(
            'callback' => 'ajax_product_field_length_check',
			'event' => 'change',
        );

        $form['field_cost_price']['widget'][0]['value']['#ajax'] = array(
            'callback' => 'ajax_calculate_gpm',
			'event' => 'change',
        );

        $form['field_construction_price']['widget'][0]['value']['#ajax'] = array(
            'callback' => 'ajax_calculate_gpm_for_construction',
			'event' => 'change',
        );

        $form['field_retail_price']['widget'][0]['value']['#ajax'] = array(
            'callback' => 'ajax_calculate_gpm_for_retailer',
			'event' => 'change',
        );

        $form['field_dealer_price']['widget'][0]['value']['#ajax'] = array(
            'callback' => 'ajax_calculate_gpm_for_dealer',
			'event' => 'change',
        );

        if ( $node->isNew() ) {
            $form['quantity'] = array(
                '#title' => '入倉初使數量',
                '#type' => 'textfield',
                '#attributes' => array(
                    'min' => '0',
                    ' type' => 'number',
                ),
                '#weight' => 17,
                '#default_value' => 0,
                '#size' => 6,
            );

            $storage_list = array('_none' => '- None -');
            $storage_nids = \Drupal::entityQuery("node")->condition('type', 'storage')->execute();
            foreach($storage_nids as $storage_nid) {
                $storage = \Drupal\node\Entity\Node::load($storage_nid);
                $storage_list[$storage_nid] = $storage->field_storage_name->value;
            }		

            $form['storage'] = array(
                '#type' => 'select',
                '#title' => t('入庫倉'),
                '#multiple' => TRUE,
                '#weight' => 18,
                '#options' => $storage_list,
            );

            //array_unshift($form['actions']['submit']['#submit'], '_ProductSubmit');
            $form['actions']['submit']['#submit'][] = '_ProductSubmit';
        }
    }
}

/**
 * @ignore
 */
function ajax_calculate_gpm(array $form, FormStateInterface $form_state) {
	$ajax_response = new AjaxResponse();
    $dealer_price = $form_state->getValue('field_dealer_price')[0]['value'];
    $retail_price = $form_state->getValue('field_retail_price')[0]['value'];
    $cost = $form_state->getValue('field_cost_price')[0]['value'];

    $gpm = calculate_gpm_for_product($retail_price, $cost);
    $ajax_response->addCommand(new InvokeCommand('#edit-field-gpm-for-retailer-0-value', 'val', [$gpm]));
    $gpm = calculate_gpm_for_product($dealer_price, $cost);
    $ajax_response->addCommand(new InvokeCommand('#edit-field-gpm-for-vendor-0-value', 'val', [$gpm]));
    
	return $ajax_response;
}

/**
 * @ignore
 */
function ajax_calculate_gpm_for_retailer(array $form, FormStateInterface $form_state) {
    $ajax_response = new AjaxResponse();
    $retail_price = $form_state->getValue('field_retail_price')[0]['value'];
    $cost = $form_state->getValue('field_cost_price')[0]['value'];
    $gpm = calculate_gpm_for_product($retail_price, $cost);

    $ajax_response->addCommand(new InvokeCommand('#edit-field-gpm-for-retailer-0-value', 'val', [$gpm]));

    return $ajax_response;
}

/**
 * @ignore
 */
function ajax_calculate_gpm_for_dealer(array $form, FormStateInterface $form_state) {
    $ajax_response = new AjaxResponse();
    $dealer_price = $form_state->getValue('field_dealer_price')[0]['value'];
    $cost = $form_state->getValue('field_cost_price')[0]['value'];
    $gpm = calculate_gpm_for_product($dealer_price, $cost);

    $ajax_response->addCommand(new InvokeCommand('#edit-field-gpm-for-vendor-0-value', 'val', [$gpm]));

    return $ajax_response;
}

/**
 * @ignore
 */
function ajax_calculate_gpm_for_construction(array $form, FormStateInterface $form_state) {
    $ajax_response = new AjaxResponse();
    $construction_price = $form_state->getValue('field_construction_price')[0]['value'];
    $cost = $form_state->getValue('field_cost_price')[0]['value'];
    $gpm = calculate_gpm_for_product($construction_price, $cost);

    $ajax_response->addCommand(new InvokeCommand('#edit-field-gpm-for-construction-0-value', 'val', [$gpm]));

    return $ajax_response;
}

/**
 * Calculate Product gross profit margin.
 * 
 * @param float $price - Product sale price
 * @return float - gross profit margin
 */
function calculate_gpm_for_product($price, $cost) {
    if ( $price == 0 ) {
        return 0;
    }
    $gpm = ($price - $cost) / $price;
    return round($gpm, 2) * 100;
}

/**
 * @ignore
 */
function ajax_check_unique_id(array $form, FormStateInterface $form_state) {
	$ajax_response = new AjaxResponse();
	$title = $form_state->getValue('title')[0]['value'];
    
    $ajax_response->addCommand(new HtmlCommand('.title-message', ''));
    if ( strlen($title) > 20 ) {
        $ajax_response->addCommand(new HtmlCommand('.title-message', '<font color="red">產品編號不得超過20個英文字母長度.</font>'));
        $ajax_response->addCommand(new InvokeCommand('#edit-title-0-value', 'val', [""]));
    } else {
        $query = \Drupal::entityQuery("node")->condition('type', 'product')->condition('title', trim($title))->execute();
        if ( count($query) > 0 ) {
            $ajax_response->addCommand(new HtmlCommand('.title-message', '<font color="red">產品編號重複, 請重新命名</font>'));
            $ajax_response->addCommand(new InvokeCommand('#edit-title-0-value', 'val', [""]));
        }
    }

	return $ajax_response;
}

/**
 * @ignore
 */
function ajax_product_field_length_check(array $form, FormStateInterface $form_state) {
    $ajax_response = new AjaxResponse();
    $field_product_name = $form_state->getValue('field_product_name')[0]['value'];
    $ajax_response->addCommand(new HtmlCommand('.title-message', ''));
    if ( strlen($field_product_name) > 40 ) {
        $ajax_response->addCommand(new HtmlCommand('.title-message', '<font color="red">產品名稱不得超過40個英文字母長度.</font>'));
        $ajax_response->addCommand(new InvokeCommand('#edit-field-product-name-0-value', 'val', [""]));
    }
    return $ajax_response;
}

/**
 * @ignore
 */
function _ProductSubmit(array &$form, FormStateInterface $form_state) {
    $node  = $form_state->getFormObject()->getEntity();
    
    $storage_nids = $form_state->getValue('storage');
    if ( (count($storage_nids) == 1) && ($storage_nids[0] == '_none') ) {
    } else {
        $stock_up_number = $form_state->getValue('quantity');
        foreach($storage_nids as $storage_nid) {
            $inventory = Node::create(['type' => "stock_up",]);
            $inventory->field_storage_id->target_id = $storage_nid;
            $inventory->set('field_stock', $stock_up_number);
            $inventory->field_product_goods->target_id = $node->id();
            $inventory->save();

            \Drupal::messenger()->addMessage(get_product_or_goods_name_by_nid($node->id()) . "  以入庫 " . get_storage_name_by_nid($storage_nid) . ", 最新庫存數量 " . $stock_up_number);
            create_warehouse_transaction_log($node->id(), "", $storage_nid, "inbound", $stock_up_number, 0, 
                                                $stock_up_number, "產品新增", "");
        }
    }
}


