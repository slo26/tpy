<?php
use \Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\InvokeCommand;
use Drupal\Core\Ajax\HtmlCommand;
use Drupal\Core\Ajax\RemoveCommand;
use Drupal\Core\Url;
use Drupal\Core\Ajax;
use Drupal\Core\Ajax\OpenModalDialogCommand;
use Drupal\Core\Ajax\ReplaceCommand;
use \Drupal\node\Entity\Node;
use \Drupal\Core\Routing\TrustedRedirectResponse;

const MODERATION_STATE_LABEL = array(
        'draft' => '草稿',
        'rate' => '銷售估價',
        'shipment' => '銷售出貨',
        'done' => '銷售完成',
        'drop' => '銷售不成立',
        'return' => '銷售退貨',
        'return_completed' => '銷退完成'
);

function sales_order_content_type_form_views_exposed_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
        if ( $form['#id'] == 'views-exposed-form-all-sell-orders-page-1' ) {
                $form['create_content'] = [
                      '#type' => 'link',
                      '#title' => '新增銷售單',
                      '#url' => Url::fromUri("https://" . \Drupal::config('common_utils.settings')->get('hostname') . '/node/add/sales_order'),
                      '#attributes' => [
                        'id' => ['views-exposed-form-create-content-button'],
                      ],
                      '#weight' => 100,
                ];
        }
    }

function sales_order_content_type_preprocess_node(&$variables) {
	$variables['company'] = \Drupal::config('common_utils.settings')->get('company');
	$variables['company_address'] = \Drupal::config('common_utils.settings')->get('company_address');
	$variables['company_phone'] = \Drupal::config('common_utils.settings')->get('company_phone');
	$variables['company_fax'] = \Drupal::config('common_utils.settings')->get('company_fax');
	$node = \Drupal::routeMatch()->getParameter('node');
    if ($node instanceof \Drupal\node\NodeInterface) {
		if ($node->bundle() == 'sales_order') {
			$variables['sales_order'] = ['#markup' => sales_order_table_generator_in_view($node)];
		}
	}
}

function sales_order_content_type_menu_local_tasks_alter(&$data, $route_name) {
	$route_match = \Drupal::routeMatch();
	if ($route_match->getRouteName() == 'entity.node.canonical') {
    	$node = $route_match->getParameter('node');
		if ( $node->bundle() != "sales_order") {
			unset($data['tabs'][0]['sales_order_content_type.sale_sheet']);
		}
	}
}

function sales_order_table_generator_in_view($node) {
	$customer_nid = $node->field_customer_entity->target_id;
	$customer = \Drupal\node\Entity\Node::load($customer_nid);
	$type = typeOfShipment($node);
	/***************table head***************/ 
	{
		$table_start = '<table id="sales-oder-table-header"><tbody>';
		$table_body = '<tr id="sales-oder-table-header-tpy-name"><td colspan="4" align="center"><strong>' . \Drupal::config('common_utils.settings')->get('company') .'</strong></td></tr>';
		$table_body .= '<tr id="sales-oder-table-header-tpy-add"><td colspan="4" align="center">' . \Drupal::config('common_utils.settings')->get('company_address') .'</td></tr>';
		$table_body .= '<tr id="sales-oder-table-header-tpy-phone"><td colspan="4" align="center">Tel: ' . \Drupal::config('common_utils.settings')->get('company_phone') . '  Fax: ' . \Drupal::config('common_utils.settings')->get('company_fax') . '</td></tr>';
		$status = "";
		if ( $node->moderation_state->value == 'draft' ) {
			$status = "草稿";
		} else if ( $node->moderation_state->value == 'rate' ) {
			$status = "報價單";
		} else if ( ($node->moderation_state->value == 'shipment') || ($node->moderation_state->value == 'done') ) {
			if ( $type == 4 ) {
				$status = "出貨單/銷貨轉寄庫單";
			} else if ( $type == 1 ) {
				$status = "出貨單";
			}  else if ( $type == 3 ) {
				$status = "銷貨轉寄庫單";
			}
		} else if ( $node->moderation_state->value == 'drop' ) {
			$status = "銷售不成立";
		} else if ( $node->moderation_state->value == 'return' || $node->moderation_state->value == 'return_completed' ) {
			$status = "銷售退貨單";
		}
		$table_body .= '<tr id="sales-oder-table-header-status"><td colspan="4" align="center"><strong><u>' . $status .'</u></strong></td></tr>';
		$table_body .= '<tr id="sales-oder-table-header-sell-info"><td colspan="3" align="left">報價日期: ' . date('Y/m/d') .'</td><td align="left" width="200px">有效日期: </td></tr>';	
		$table_body .= '<tr id="sales-oder-table-header-sell-info"><td colspan="3" align="left">客戶名稱: <a href="/node/' . $customer_nid .'/edit" target="blank">' . $customer->field_customer_title->value . '</a></td><td align="left" width="200px">報價憑證: ' . $node->title->value . '</td></tr>'; 
		$table_body .= '<tr id="sales-oder-table-header-sell-info"><td colspan="3" align="left">公司地址: ' . $customer->field_address->value . '</td><td align="left" width="200px">聯絡人: ' . $customer->field_contact_person->value . '</td></tr>'; 
		if ( !empty($node->field_shipping_address->value) ) {
			$table_body .= '<tr id="sales-oder-table-header-sell-info"><td colspan="4" align="left">發貨地址: ' . $node->field_shipping_address->value . '</td></tr>'; 
		}
		$table_body .= '<tr id="sales-oder-table-header-sell-info"><td align="left">電話: ' . $customer->field_phone->value . '</td><td align="left">連絡人電話: ' . $customer->field_mobile->value . '</td><td>傳真: ' . $customer->field_fax->value . '</td><td align="left" width="200px">統一編號: ' . $customer->field_uniform_number->value . '</td></tr>'; 
		$table_end = "</tbody></table>";
		$table_head = $table_start . $table_body . $table_end;
	}
	
	/***************table list***************/
	{
		$table_list = "";
		if ( ($node->moderation_state->value == 'shipment') || ($node->moderation_state->value == 'done') ) {
			$table_list = shipping($node);
		} else {
			$total_amount_before_tax = 0;
			$table_start = '<table id="sales-oder-table-list"><tbody>';
			$table_body = '<tr><th width="50px">欄號</th><th>產品型號</th><th>產品名稱</th><th width="75px">報價數量</th><th width="85px">稅前售價</th><th width="85px">稅前金額</th></tr>';
			$tids = \Drupal::entityQuery("taxonomy_term")->condition("vid", "sell_items")
						->condition('field_order_id', $node->nid->value)
						->execute();
			$index = 0;
			foreach($tids as $tid) {
				$item = \Drupal\taxonomy\Entity\Term::load($tid);
				$product = \Drupal\node\Entity\Node::load($item->field_product_id->target_id);
				$index++;
				$table_body .= '<tr><td>' . $index . '</td><td><a href="/taxonomy/term/' .$tid . '/edit" target="blank">' . $product->title->value . '</a></td><td>' . $product->field_product_name->value . 
								'</td><td align="right">' . number_format($item->field_quantity->value) . 
								'</td><td  align="right">' . number_format($item->field_price->value) . 
								'</td><td  align="right">' . number_format($item->field_total_amount->value) . '</td></tr>';
				if ( !empty($item->field_comments->value) ) {
					$table_body .= '<tr><td colspan="6" align="left">加註: ' . $item->field_comments->value . '</td></tr>';
				}
				$total_amount_before_tax = $total_amount_before_tax + $item->field_total_amount->value;
			}
			$table_body .= '<tr class="sales-oder-table-list-bottom"><td colspan="6" align="center"> (以下空白) </td></tr>'; 
			$table_end = "</tbody></table>"; 
			$table_list = $table_start . $table_body . $table_end;
		}	
	}
	
	/***************table footer***************/
	{
		$table_footer = "";
		if ( ($node->moderation_state->value != 'shipment') && ($node->moderation_state->value != 'done') ) {
			//$sales_tax = \Drupal::config('common_utils.settings')->get('sales_tax')/100;
			$sales_tax = $node->field_tax_rate->value;
			$total_amount_after_tax = $total_amount_before_tax + ($total_amount_before_tax * $sales_tax);
			$sales = \Drupal\user\Entity\User::load($customer->field_sales->target_id);

			$table_start = '<table id="sales-oder-table-footer"><tbody>';
			$table_body = '<tr><td align="left" width="110px">業務代表: </td><td align="left">' . $sales->field_full_name->value . 
							'</td><td align="left" width="70px">幣別: </td><td align="left">' . '新台幣' . 
							'</td><td align="left" width="110px">稅前合計: </td><td align="right" width="110px">' . number_format($total_amount_before_tax) .
							'</td></tr>';
			$table_body .= '<tr><td align="left" width="110px">結帳日:</td><td colspan="3" align="left">' . get_entity_storage_label($node, "field_payment_due", $customer->field_payment_due->value) . 
							'</td><td align="left" width="110px">營業稅額: </td><td align="right" width="110px">' . number_format($total_amount_before_tax * $sales_tax) .
							'</td></tr>'; 
			$table_body .= '<tr><td align="left" width="110px"></td><td colspan="3" align="left"></td>' . 
							'<td align="left" width="110px">報價總額: </td><td align="right" width="110px">' . number_format($total_amount_after_tax) . 
							'</td></tr>'; 
			$table_end = "</tbody></table>";
			$table_footer = $table_start . $table_body . $table_end;
		}
	}

	if ( !empty($node->field_comments_for_print->value) ) {
		$comment = \Drupal::config ('common_utils.comment_selection_for_print')->get($node->field_comments_for_print->value);
		$comment = '<div id="sales-oder-table-comment"><pre>' . $comment . '</pre></div>';
	} else {
		$comment = "";
	}
	
	return $table_head . $table_list . $table_footer . $comment;
}

function sales_order_content_type_node_presave(Drupal\Core\Entity\EntityInterface $node) {
	if ( $node->type->target_id == "sales_order" ) {
		if ( $node->moderation_state->value == "rate" ) {
			$node->set('field_appraise_date', date('Y-m-d', time()));
			$label = "銷售估價";
		} else if ( $node->moderation_state->value == "shipment" ) {
			$node->set('field_shipping_date', date('Y-m-d', time()));
			$label = "銷售出貨";
			$bill_nid = $node->field_bill->target_id;
			if ( !empty($bill_nid) ) {
				$bill = \Drupal\node\Entity\Node::load($bill_nid);
				$bill->set('field_expected_receive_payment', $node->field_shipping_date->value);
				
				if ( empty($bill->field_payment_expire->value) ) {
					$customer = \Drupal\node\Entity\Node::load($node->field_customer_entity->target_id);
					$payment_due = $customer->field_payment_due->value;
					if ( !empty(payment_due) && strpos($payment_due, "check") !== false ) {
						$payment_due = str_replace("check_", "", $payment_due);
						$payment_due = date("Y-m-d", strtotime(date("Y-m-25") . "+$payment_due days"));  
						$bill->set('field_payment_expire', $payment_due);
					}
				}
				$bill->save();
			}
		} else if ( $node->moderation_state->value == "done" ) {
			$node->set('field_completed_date', date('Y-m-d', time()));
			$label = "銷售完成";
		} else if ( $node->moderation_state->value == "return" ) {
			$node->set('field_return_date', date('Y-m-d', time()));
			$label = "銷售退貨";
		} else if ( $node->moderation_state->value == "return_completed" ) {
			$node->set('field_return_completed', date('Y-m-d', time()));
			$label = "銷退完成";
		} else if ( $node->moderation_state->value == "draft" ) {
			$label = "草稿";
		}
		if ( !$node->isNew() ) {
			$node->set('revision_log', "$label 狀態儲存.");
			$sell_items = $node->get('field_sell_products')->getValue();
			$future_sell_items = [];
			for ($i=0; $i < count($sell_items); $i++) {			
				$future_sell_items[] = $sell_items[$i]['target_id'];
			}

			$current_node = \Drupal\node\Entity\Node::load($node->id());
			$sell_items = $current_node->get('field_sell_products')->getValue();
			$current_sell_items = [];
			for ($i=0; $i < count($sell_items); $i++) {
				if ( !in_array($sell_items[$i]['target_id'], $future_sell_items) ) {
					$current_sell_items[] = $sell_items[$i]['target_id'];
				}
				
			}
			
			for ($i=0; $i < count($current_sell_items); $i++) {
				$sell_item = \Drupal\taxonomy\Entity\Term::load($current_sell_items[$i]);
				$node->field_sell_products[] = $sell_item;
			}
		}
	}
}

/**
 * Implements hook_page_preprocess_html().
 */
function sales_order_content_type_preprocess_html(&$variables) {
    //Add JS and CSS library
    $variables['#attached']['library'][] = 'sales_order_content_type/sales_order_content_type';
}

function sales_order_content_type_form_alter(&$form, FormStateInterface &$form_state, $form_id) {
	if ( $form_id === 'node_sales_order_form' || $form_id == 'node_sales_order_edit_form' ) {
		$node = $form_state->getFormObject()->getEntity();
		/*-----------------訂單資訊---------------------*/
		$form['order_info'] = array(
						'#group' => 'advanced',
						'#type' => 'details',
						'#title' => t('訂單資訊'),
						'#attributes' => [
							'class' => ['node-form-options']
						],
						'#attached' => [
							'library' => ['node/drupal.node'],
						],
						//'#weight' => -50,
						'#open' => true,
						'#open' => true,
        );
		$form['title']['#group'] = 'order_info';
		
		if ( $node->moderation_state->value == "return" || $node->moderation_state->value == "return_completed" ) {
			$original_sales = \Drupal\node\Entity\Node::load($node->field_original_sales_order_id->target_id);
			$form['order_info']['original_sale'] = array('#type' => 'markup','#markup' => '<div class="original-sale">原銷售單: <a href="/node/' . $node->field_original_sales_order_id->target_id . '/edit" target="_blank">' . $original_sales->title->value . '</a></div>');
			$form['order_info']['original_sale']['#weight'] = 1;
		}

		$form['field_created_date']['#group'] = 'order_info';
		if ($form['field_created_date']['widget'][0]['value']['#default_value'] == '') {
			$form['field_created_date']['#access'] = FALSE;
		} else {
			$form['field_created_date']['widget'][0]['value']['#description'] = $form['field_created_date']['widget'][0]['value']['#default_value']->format('Y/m/d');
		}
		$form['field_appraise_date']['#group'] = 'order_info';
		if ($form['field_appraise_date']['widget'][0]['value']['#default_value'] == '') {
			$form['field_appraise_date']['#access'] = FALSE;
		} else {
			$form['field_appraise_date']['widget'][0]['value']['#description'] = $form['field_appraise_date']['widget'][0]['value']['#default_value']->format('Y/m/d');
		}
		$form['field_shipping_date']['#group'] = 'order_info';
		if ($form['field_shipping_date']['widget'][0]['value']['#default_value'] == '') {
			$form['field_shipping_date']['#access'] = FALSE;
        } else {
          	$form['field_shipping_date']['widget'][0]['value']['#description'] = $form['field_shipping_date']['widget'][0]['value']['#default_value']->format('Y/m/d');
        }
		$form['field_completed_date']['#group'] = 'order_info';
		if ($form['field_completed_date']['widget'][0]['value']['#default_value'] == '') {
			$form['field_completed_date']['#access'] = FALSE;
        } else {
          	$form['field_completed_date']['widget'][0]['value']['#description'] = $form['field_completed_date']['widget'][0]['value']['#default_value']->format('Y/m/d');
        }
		$form['field_return_date']['#group'] = 'order_info';
		if ($form['field_return_date']['widget'][0]['value']['#default_value'] == '') {
			$form['field_return_date']['#access'] = FALSE;
        } else {
        	$form['field_return_date']['widget'][0]['value']['#description'] = $form['field_return_date']['widget'][0]['value']['#default_value']->format('Y/m/d');
        }
		$form['field_return_completed']['#group'] = 'order_info';
		if ($form['field_return_completed']['widget'][0]['value']['#default_value'] == '') {
			$form['field_return_completed']['#access'] = FALSE;
        } else {
        	$form['field_return_completed']['widget'][0]['value']['#description'] = $form['field_return_completed']['widget'][0]['value']['#default_value']->format('Y/m/d');
        }
		
		if ( $node->isNew() ) {
			$sales_order_id = generate_sale_id();
			$form ['title']['widget'][0]['value']['#default_value'] = $sales_order_id;
			$form ['title']['#disabled'] = true;
		} else {
			$customer_id = $node->field_customer_entity->target_id;
		}

		$form['moderation_state']['widget'][0]['state']['#description'] = " ";
		$form['moderation_state']['widget'][0]['state']['#ajax'] = [
			'callback' => 'ajax_order_status_changed_validation',
			'event' => 'change',
			'wrapper' => 'ajax-change',
		];

		/******************帳單資訊**********************/
		$form['billing_info'] = array(
						'#group' => 'advanced',
						'#type' => 'details',
						'#title' => t('帳單資訊'),
						'#attributes' => [
							'class' => ['node-form-options']
						],
						'#attached' => [
							'library' => ['node/drupal.node'],
						],
						//'#weight' => -49,
						'#open' => true,
						'#open' => true,
        );

		$form['billing_info']['bill_link'] = array('#type' => 'markup','#markup' => '<div class="bill-link"></div>');
		if ( !empty($node->field_bill->target_id) ) {
			$form['billing_info']['bill_link']['#markup'] = '<div class="bill-link"><a target="_blank" href="/node/' . $node->field_bill->target_id . '/edit">帳單己建立, 連接到帳單</a></div>';
		} else {
			$form['billing_info']['generate_bill'] = array(
				'#type' => 'submit',
				'#value' => t('產生銷售帳單'),
				'#attributes' => [
					'class' => [
						'use-ajax',
					],
				],
				'#ajax' => [
					'callback' => 'generate_bill_callback',
					'event' => 'click',
				],
				'#prefix' => '<div class="generate-bill">',
				'#suffix' => '</div>',
			);
		}
		if ( $node->moderation_state->value == "return" ) {
			$form['billing_info']['generate_bill']['#value'] = "產生退貨帳單";
		}
		$form['billing_info']['total_amount_without_tax'] = array('#type' => 'markup',
			'#markup' => '<div class="total-amount-without-tax"></div>',
		);
		$form['billing_info']['tax'] = array('#type' => 'markup',
			'#markup' => '<div class="tax"></div>',
		);
		$form['billing_info']['total_amount_with_tax'] = array('#type' => 'markup',
			'#markup' => '<div class="total-amount-with-tax"></div>',
		);
		if ( $node->moderation_state->value != "return_completed" && $node->moderation_state->value != "return" ) {
			$form['billing_info']['deposit'] = array('#type' => 'markup',
				'#markup' => '<div class="deposite"></div>',
			);
			$form['billing_info']['discount'] = array('#type' => 'markup',
				'#markup' => '<div class="discount"></div>',
			);
			$form['billing_info']['write_off_amount'] = array('#type' => 'markup',
				'#markup' => '<div class="write-off-amount"></div>',
			);
		}
		$form['billing_info']['write_off_amount'] = array('#type' => 'markup',
			'#markup' => '<div class="write-off-amount"></div>',
		);
		$form['billing_info']['remain_amount'] = array('#type' => 'markup',
			'#markup' => '<div class="remain-amount"></div>',
		);
		$form['billing_info']['expected_recevied_payment'] = array('#type' => 'markup',
			'#markup' => '<div class="expected-recevied-payment"></div>',
		);
		$form['billing_info']['actual_recevied_payment'] = array('#type' => 'markup',
			'#markup' => '<div class="actual-recevied-payment"></div>',
		);

		$bill_nids = \Drupal::entityQuery("node")->condition('type', 'billing')->condition('field_order_id', $node->id())->execute();
		foreach($bill_nids as $bill_nid) {
			$bill = \Drupal\node\Entity\Node::load($bill_nid);
			
			$form['billing_info']['total_amount_without_tax']['#markup'] = '<div class="total-amount-without-tax">' . t('未含稅總價  $') . number_format($bill->field_total_amount_without_tax->value) . '</div>';
			$form['billing_info']['tax']['#markup'] = '<div class="tax">' . t('+稅金  $') . $bill->field_tax->value . '</div>';
			$form['billing_info']['total_amount_with_tax']['#markup'] = '<div class="total-amount-with-tax">' . t('=含稅總價  $') . number_format($bill->field_total_amount_with_tax->value) . '</div>';
			if ( $node->moderation_state->value != "return_completed" && $node->moderation_state->value != "return" ) {
				$form['billing_info']['deposit']['#markup'] = '<div class="deposite">' . t('-訂金  $') . number_format($bill->field_deposit->value) . '</div>';
				$form['billing_info']['discount']['#markup'] = '<div class="discount">' . t('-折讓金額  $') . number_format($bill->field_discount->value) . '</div>';
				$form['billing_info']['write_off_amount']['#markup'] = '<div class="write-off-amount">' . t('-沖銷金額  $') . number_format($bill->field_write_off_amount->value) . '</div>';
				$form['billing_info']['remain_amount']['#markup'] = '<font color="red"><div class="remain-amount">' . t('=剩餘未支付含稅總價  $') . number_format(($bill->field_total_amount_with_tax->value - $bill->field_deposit->value - $bill->field_discount->value - $bill->field_write_off_amount->value)) . '</div></font>';
				$form['billing_info']['expected_recevied_payment']['#markup'] = '<div class="expected-recevied-payment">' . t('帳款日期  ') . $bill->field_expected_receive_payment->value . '</div>';
				$form['billing_info']['actual_recevied_payment']['#markup'] = '<div class="actual-recevied-payment">' . t('已收款日期  ') . $bill->field_actual_received_payment->value . '</div>';
			} else {
				$form['billing_info']['remain_amount']['#markup'] = '<font color="red"><div class="remain-amount">' . t('剩餘末退含稅總價  $') . number_format(($bill->field_total_amount_with_tax->value - $bill->field_deposit->value - $bill->field_write_off_amount->value)) . '</div></font>';
				$form['billing_info']['write_off_amount']['#markup'] = '<div class="write-off-amount">' . t('沖銷退款金額  $') . number_format($bill->field_write_off_amount->value) . '</div>';
				$form['billing_info']['expected_recevied_payment']['#markup'] = '<div class="expected-recevied-payment">' . t('結帳日期  ') . $bill->field_expected_receive_payment->value . '</div>';
			$form['billing_info']['actual_recevied_payment']['#markup'] = '<div class="actual-recevied-payment">' . t('已退款日期  ') . $bill->field_actual_received_payment->value . '</div>';
			}
			
		}
		/*-----------------客戶資訊---------------------*/
		$form['customer_info'] = array(
						'#type' => 'details',
						'#title' => t('客戶資訊'),
						'#weight' => -1,
							'#open' => true,
        );

		$form['field_customer_entity']['widget'][0]['target_id']['#ajax'] = array(
                'callback' => 'ajax_customer_info_loading',
                'wrapper' => 'ajax-wrapper',
                'event' => 'autocompleteclose change',
        );

		$form['field_customer_entity']['#group'] = 'customer_info';
		$form['customer_title'] = array(
            '#title' => '客戶名稱',
            '#type' => 'textfield',
            '#size' => 60,
			'#weight' => 4,
			'#disabled' => true,
			'#group' => 'customer_info',
        );
		$form['customer_phone'] = array(
            '#title' => '客戶電話',
            '#type' => 'textfield',
            '#size' => 60,
			'#weight' => 4,
			'#disabled' => true,
			'#group' => 'customer_info',
        );
		$form['customer_email'] = array(
            '#title' => '客戶 Email',
            '#type' => 'textfield',
            '#size' => 60,
			'#weight' => 4,
			'#disabled' => true,
			'#group' => 'customer_info',
        );
		$form['customer_address'] = array(
            '#title' => '客戶地址',
            '#type' => 'textfield',
            '#size' => 60,
			'#weight' => 4,
			'#disabled' => true,
			'#group' => 'customer_info',
        );
		$form['customer_uniform_num'] = array(
            '#title' => '統一編號',
            '#type' => 'textfield',
            '#size' => 60,
			'#weight' => 4,
			'#disabled' => true,
			'#group' => 'customer_info',
        );
		$form['customer_contact_window'] = array(
            '#title' => '聯絡人',
            '#type' => 'textfield',
            '#size' => 60,
			'#weight' => 4,
			'#disabled' => true,
			'#group' => 'customer_info',
        );
		$form['customer_cell'] = array(
            '#title' => '聯絡人電話',
            '#type' => 'textfield',
            '#size' => 60,
			'#weight' => 4,
			'#disabled' => true,
			'#group' => 'customer_info',
        );
		$form['customer_payment_due'] = array(
            '#title' => '結帳日',
            '#type' => 'textfield',
            '#size' => 60,
			'#weight' => 4,
			'#disabled' => true,
			'#group' => 'customer_info',
        );

		if ( !$node->isNew() ) {
			$customr_nid = $node->field_customer_entity->target_id;
			$customer = \Drupal\node\Entity\Node::load($customr_nid);
			$form['customer_title']['#default_value'] = $customer->field_customer_title->value;
			$form['customer_phone']['#default_value'] = $customer->field_phone->value;
			$form['customer_email']['#default_value'] = $customer->field_email->value;
			$form['customer_address']['#default_value'] = $customer->field_address->value;
			$form['customer_uniform_num']['#default_value'] = $customer->field_uniform_number->value;
			$form['customer_contact_window']['#default_value'] = $customer->field_contact_person->value;
			$form['customer_cell']['#default_value'] = $customer->field_mobile->value;
			$form['customer_payment_due']['#default_value'] = get_entity_storage_label($customer, 'field_payment_due', $customer->field_payment_due->value);
		}
		/*-----------------送貨資訊---------------------*/
		$form['delivery_info'] = array(
						'#type' => 'details',
						'#title' => t('送貨資訊'),
						'#weight' => -1,
							'#open' => true,
        );

		if ( !$node->isNew() ) {
			$form['delivery_info']['#open'] = false;
			$form['customer_info']['#open'] = false;
		}

		$form['field_logistics']['#group'] = 'delivery_info';
		$form['field_shipping_number']['#group'] = 'delivery_info';
		$form['field_shipping_address']['#group'] = 'delivery_info';
		$form['field_delivery']['#group'] = 'delivery_info';
		$form['field_receiver']['#group'] = 'delivery_info';

		/*-----------------新增訂單項目---------------------*/
		$form['item_section'] = array(
			'#type' => 'markup',
			'#markup' => '<div class="seven-details__summary">' . t('訂單項目') . '</div>',
			'#weight' => 20,
        );

		$form['add_item_status_label'] = array(
            '#prefix' => '<div class="add-item-status-label">訊息 : ',
			'#suffix' => '</div>',
            '#weight' => 20,
        );

		$form['add_item_status_message'] = array(
            '#prefix' => '<div class="add-item-status-message">',
			'#suffix' => '</div>',
            '#weight' => 20,
        );

		$form['list_product'] = [
			'#type' => 'entity_autocomplete',
			'#target_type' => 'node',
			'#title' => t('產品編號'),
			'#selection_settings' => array(
				'target_bundles' => array('product'),
			),
			'#ajax' => [
				'callback' => 'ajax_product_loading',
				'event' => 'autocompleteclose change',
			],
			'#weight' => '23',
			'#size' => 23,
			'#prefix' => '<div class="add-single-item-into-order">',
			'#suffix' => '</div>',
		];

		$form['product_name'] = array(
            '#title' => '產品名稱',
            '#type' => 'textfield',
			'#weight' => 23,
            '#size' => 23,
			'#disabled' => true,
			'#prefix' => '<div class="add-single-item-into-order">',
			'#suffix' => '</div>',
        );

		$form['storage'] = array(
			'#type' => 'select',
          	'#title' => t('倉庫'),
			'#weight' => $form['list_product']['#weight'] + 1,
			'#options' => array('_none' => '- None -'),
			'#ajax' => array(
				'callback' => 'ajax_quantity_base_on_select',
				'event' => 'change',
			),
			'#prefix' => '<div id="edit-storage-select">',
			'#suffix' => '</div>',  
		);

		$form['quantity'] = array(
            '#title' => '數量',
            '#type' => 'textfield',
			'#ajax' => array(
				'callback' => 'ajax_calculate_price',
				'event' => 'change',
			),
			'#attributes' => array(
				'min' => '0',
				'max' => '0',
        		' type' => 'number',
    		),
			'#weight' => 26,
			'#size' => 5,
			'#prefix' => '<div class="add-quantity">',
			'#suffix' => '</div>',
        );

		$form['price'] = array(
            '#title' => '單價',
            '#type' => 'textfield',
			'#ajax' => array(
				'callback' => 'ajax_calculate_price',
				'event' => 'change',
			),
            '#size' => 8,
			'#weight' => 27,
			'#prefix' => '<div class="add-single-item-into-order">',
			'#suffix' => '</div>',
        );

		$form['discount'] = array(
            '#title' => '折扣(%)',
            '#type' => 'textfield',
			'#ajax' => array(
				'callback' => 'ajax_calculate_price',
				'event' => 'change',
			),
            '#size' => 4,
			'#weight' => 28,
			'#prefix' => '<div class="add-single-item-into-order">',
			'#suffix' => '</div>',
        );

		$form['gross_profit_margin'] = array(
            '#title' => '毛利率(%)',
            '#type' => 'textfield',
			'#weight' => 28,
            '#size' => 5,
			//'#disabled' => true,
			'#prefix' => '<div class="add-single-item-into-order">',
			'#suffix' => '</div>',
        );

		$form['total_amount'] = array(
            '#title' => '金額',
            '#type' => 'textfield',
            '#size' => 8,
			'#weight' => 29,
			'#prefix' => '<div class="add-single-item-into-order">',
			'#suffix' => '</div>',
        );

		/*$form['add_new_order_item_modal'] = array(
			'#type' => 'submit',
			'#value' => t('新增訂單項目'),
			'#weight' => 29,
			'#attributes' => [
				'class' => [
					'use-ajax',
				],
			],
			'#ajax' => [
				'callback' => 'add_item_to_order_callback',
				'event' => 'click',
			],
        );*/

		$form['create_single_item'] = array(
			'#type' => 'submit',
			'#value' => t('新增'),
			'#weight' => 30,
			'#attributes' => [
				'class' => [
					'use-ajax',
				],
			],
			'#ajax' => [
				'callback' => 'create_single_item_callback',
				'event' => 'click',
			],
			'#prefix' => '<div class="add-single-item-into-order-button">',
			'#suffix' => '</div>',
        );

		$form['to_sell_item_list_by_all'] = array(
				'#prefix' => '<div class="to-sell-item-list-by-all">',
				'#suffix' => '</div>',
				'#weight' => 30,
		);

		$form['to_sell_item_list_by_product'] = array(
				'#prefix' => '<div class="to-sell-item-list-by-product">',
				'#suffix' => '</div>',
				'#weight' => 30,
			);

		$form['sell_item_table'] = array(
              '#title' => t('訂單項目管理'),
              '#weight' => 31,
			  '#prefix' => '<div id="sell-item-table"></div>',
        );

		if ( !$node->isNew() ) {
			$form['sell_item_table']['#prefix'] = purchase_items_table_generate($node->id());
			$form['to_sell_item_list'] = array(
				'#prefix' => '<div class="to-sell-item-list"><a href="/admin/sell-items?title=' . $node->title->value .'" target="_blank">連接到此銷售訂單列表</a>',
				'#suffix' => '</div>',
				'#weight' => 32,
			);
		}
		/*$form['regenerate_table'] = array(
			'#type' => 'submit',
			'#value' => t('整理訂單項目'),
			'#weight' => 31,
			'#attributes' => [
				'class' => [
					'use-ajax',
				],
			],
			'#ajax' => [
				'callback' => 'table_regenerate_callback',
				'event' => 'click',
			],
			'#prefix' => '<div class="to-sell-item-list">',
			'#suffix' => '</div>',
		);*/

		$form['comment_section'] = [
			'#group' => 'advanced',
			'#type' => 'details',
			'#title' => t('額外選項'),
			'#attributes' => [
				'class' => ['node-form-options']
			],
			'#attached' => [
				'library' => ['node/drupal.node'],
			],
			'#optional' => true,
			'#open' => true,
		];

		$form['field_comments_for_print']['#group'] = 'comment_section';
		$form['field_comments_for_print']['widget']['#ajax'] = array('callback' => 'ajax_load_print_comment','event' => 'change',);

		$form['comment_section']['comment'] = array(
			'#type' => 'markup',
			'#markup' => '<div class="comment-print"></div>',
			'#weight' => 8,
        );
		$form['field_rich_comment']['#group'] = 'comment_section';

		if ( !$node->isNew() ) {
			if ( !empty($node->field_comments_for_print->value) ) {
				$comment_value = \Drupal::config ('common_utils.comment_selection_for_print')->get($node->field_comments_for_print->value);
				$form['comment_section']['comment']['#markup'] = '<div class="comment-print"><pre>' . $comment_value . '</pre><a href="/admin/common_utils/comments-for-print" target="blank">修改備註請點此連接</a></div>';
			}		
		}

		$form['actions']['trigger_return_process'] = array(
			'#type' => 'submit',
			'#value' => t('退此銷售單'),
			//'#submit' => array('secondary_submit_function'),
			'#weight' => 50,
			'#attributes' => [
				'class' => [
					'use-ajax',
				],
			],
			'#ajax' => [
				'callback' => 'ajax_return_process',
				'event' => 'click',
			],
        );
		//$form['#attached']['library'][] = 'sales_order_content_type/sales_order_content_type';
	}
}

function ajax_return_process(array $form, FormStateInterface $form_state) {
	$ajax_response = new AjaxResponse();
	$node = $form_state->getFormObject()->getEntity();
	$field_sell_products = $node->get('field_sell_products')->getValue();
	for ($i=0; $i < count($field_sell_products); $i++) {
		$sell_items_tids[] = $field_sell_products[$i]['target_id'];
	}
	
	$return_node = Node::create(['type' => "sales_order",]);
	$return_node->set('title', generate_sale_id());
	$return_node->field_customer_entity->target_id = $node->field_customer_entity->target_id;
	$return_node->set('field_original_sales_order_id', $node->id());
	$return_node->set('moderation_state', "return");
	$return_node->save();
	$return_node_nid = $return_node->id();

	$sell_products = array();
	foreach($sell_items_tids as $sell_items_tid) {
		$sell_item = \Drupal\taxonomy\Entity\Term::load($sell_items_tid);
		$return_item = \Drupal\taxonomy\Entity\Term::create(['vid' => 'sell_items']);
		$return_item->set('field_sell_type', 'return');
		$return_item->set('name', gen_sell_item_id($return_node->title->value));
		$return_item->field_order_id->target_id = $return_node_nid;
		$return_item->set('field_product_id', $sell_item->field_product_id->target_id);
		$return_item->set('field_storage', $sell_item->field_storage->target_id);
		$return_item->set('field_temporary_storage', $sell_item->field_temporary_storage->target_id);

		$return_item->set('field_quantity', $sell_item->field_quantity->value);
		$return_item->set('field_price', $sell_item->field_price->value);
		$return_item->set('field_discount', $sell_item->field_discount->value);
		$return_item->set('field_gross_profit_margin', $sell_item->field_gross_profit_margin->value);
		$return_item->set('field_total_amount', $sell_item->field_total_amount->value);
		$return_item->save();		 
		$return_item_tid = $return_item->id();
		$return_node->field_sell_products[] = $return_item;
	}
	$return_node->save();
	$url = "https://" . \Drupal::config('common_utils.settings')->get('hostname') . "/node/" . $return_node_nid . "/edit";
	$ajax_response->addCommand(new \Drupal\Core\Ajax\RedirectCommand($url));
	\Drupal::messenger()->addMessage("此頁是從". $node->title->value . "產生的退貨單");

	return $ajax_response;
}

function ajax_load_print_comment(array $form, FormStateInterface $form_state) {
	$ajax_response = new AjaxResponse();
	$comment_key = $form_state->getValue('field_comments_for_print')[0]['value'];
	if ( !empty($comment_key) ) {
		$comment_value = \Drupal::config ('common_utils.comment_selection_for_print')->get($comment_key);
		$ajax_response->addCommand(new HtmlCommand('.comment-print', '<pre>' . $comment_value . '</pre><a href="/admin/common_utils/comments-for-print" target="blank">修改備註請點此連接</a>'));
	} else {
		$ajax_response->addCommand(new HtmlCommand('.comment-print', ''));
	}

	return $ajax_response;
}


function ajax_order_status_changed_validation(array $form, FormStateInterface $form_state) {
	$ajax_response = new AjaxResponse();
	$node = $form_state->getFormObject()->getEntity();
	$selected_key = $form_state->getValue(moderation_state)[0]['value'];
	$selected_value = MODERATION_STATE_LABEL[$selected_key];

	$message = '<div></div>';
	if ( $selected_key == 'shipment' || $selected_key == 'done' ) {
		$shipping_address = $form_state->getValue(field_shipping_address)[0]['value'];
		if ( empty($shipping_address) ) {
			$customr_nid = $form_state->getValue('field_customer_entity')[0]['target_id'];
			$customer = \Drupal\node\Entity\Node::load($customr_nid);
			$ajax_response->addCommand(new InvokeCommand('#edit-field-shipping-address-0-value', 'val', [$customer->field_address->value]));	
		}
		if ( $selected_key == 'done' ) {
			$current_user = \Drupal::currentUser();
			$roles = $current_user->getRoles();
			if ( !in_array('manager', $roles) ) {
				$message = '<div><font color="red">你沒有足夠的權限選擇' . $selected_value . '選項</font></div>';
				$ajax_response->addCommand(new HtmlCommand('#edit-moderation-state-0-state--description', $message));
				$ajax_response->addCommand(new InvokeCommand('#edit-moderation-state-0-state', 'val', [$node->moderation_state->value]));	
				return $ajax_response;
			}
			$billing_nids = \Drupal::entityQuery("node")
                    					->condition('type', 'billing')
										->condition('field_order_id', $node->id())
                    					->execute();
			if ( count($billing_nids) == 0 ) {
				$message = '<div><font color="red">此銷售單沒有建立帳單收款, 無法選擇' . $selected_value . '選項</font></div>';
				$ajax_response->addCommand(new HtmlCommand('#edit-moderation-state-0-state--description', $message));
				$ajax_response->addCommand(new InvokeCommand('#edit-moderation-state-0-state', 'val', [$node->moderation_state->value]));
				return $ajax_response;
			} else {
				foreach ($billing_nids as $billing_nid) {
					$bill = \Drupal\node\Entity\Node::load($billing_nid);
					if ( empty($bill->field_actual_received_payment->value) ) {
						$message = '<div><font color="red">此銷售單的帳單收款還未完成, 無法選擇' . $selected_value . '選項</font></div>';
						$ajax_response->addCommand(new HtmlCommand('#edit-moderation-state-0-state--description', $message));
						$ajax_response->addCommand(new InvokeCommand('#edit-moderation-state-0-state', 'val', [$node->moderation_state->value]));
						return $ajax_response;
					}
				}
			}
		}
		if ( $node->isNew() ) {
			$message = '<div><font color="red">此新銷售單還未被建立及儲存, 無法選擇' . $selected_value . '選項</font></div>';
			$ajax_response->addCommand(new HtmlCommand('#edit-moderation-state-0-state--description', $message));
			$ajax_response->addCommand(new InvokeCommand('#edit-moderation-state-0-state', 'val', [$node->moderation_state->value]));
		} else {
			if ( num_of_sell_items($node->id()) == 0 ) {
				$message = '<div><font color="red">此銷售單沒有任何訂單項目, 無法選擇' . $selected_value . '選項</font></div>';
				$ajax_response->addCommand(new HtmlCommand('#edit-moderation-state-0-state--description', $message));
				$ajax_response->addCommand(new InvokeCommand('#edit-moderation-state-0-state', 'val', [$node->moderation_state->value]));
			} else {
				$sell_items_tids = array();
				$field_sell_products = $node->get('field_sell_products')->getValue();
				for ($i=0; $i < count($field_sell_products); $i++) {
					$sell_items_tids[] = $field_sell_products[$i]['target_id'];
				}
				foreach($sell_items_tids as $sell_items_tid) {
					$sell_item = \Drupal\taxonomy\Entity\Term::load($sell_items_tid);
					if ( empty($sell_item->field_requisition_status->value) ) {
						$message = '<div><font color="red">此銷售單還有一或多個訂單項目還沒打包出貨或轉寄倉, 無法選擇' . $selected_value . '選項</font></div>';
						$ajax_response->addCommand(new HtmlCommand('#edit-moderation-state-0-state--description', $message));
						$ajax_response->addCommand(new InvokeCommand('#edit-moderation-state-0-state', 'val', [$node->moderation_state->value]));
						break;
					}
				}
			}
		}	
	} else if ( $selected_key == 'drop' || $selected_key == 'return' ) {
		$sell_items_tids = \Drupal::entityQuery("taxonomy_term")
											->condition('vid', 'sell_items')
											->condition('field_order_id', $node->id())
											->execute();
		foreach($sell_items_tids as $sell_items_tid) {
			$sell_item = \Drupal\taxonomy\Entity\Term::load($sell_items_tid);
			if ( !empty($sell_item->field_requisition_status->value) ) {
				$message = '<div><font color="red">此銷售單有一或多個訂單項目己被打包出貨或寄倉, 請將這些項目拆封,並退回原倉庫並手動在系統上做退倉動作, 無法選擇' . $selected_value . '選項</font></div>';
				$ajax_response->addCommand(new HtmlCommand('#edit-moderation-state-0-state--description', $message));
				$ajax_response->addCommand(new InvokeCommand('#edit-moderation-state-0-state', 'val', [$node->moderation_state->value]));
				break;
			}
		}
	} else if ( $selected_key == 'rate' ) {
		if ( num_of_sell_items($node->id()) == 0 ) {
			$message = '<div><font color="red">此銷售單沒有任何訂單項目, 無法選擇' . $selected_value . '選項</font></div>';
			$ajax_response->addCommand(new HtmlCommand('#edit-moderation-state-0-state--description', $message));
			$ajax_response->addCommand(new InvokeCommand('#edit-moderation-state-0-state', 'val', [$node->moderation_state->value]));
		}
	}
	$ajax_response->addCommand(new HtmlCommand('#edit-moderation-state-0-state--description', $message));
	return $ajax_response;
}

function ajax_customer_info_loading(array $form, FormStateInterface $form_state) {
        $ajax_response = new AjaxResponse();
        $customr_nid = $form_state->getValue('field_customer_entity')[0]['target_id'];
        $customer = \Drupal\node\Entity\Node::load($customr_nid);
        $ajax_response->addCommand(new InvokeCommand('#edit-customer-title', 'val', [$customer->field_customer_title->value]));
        $ajax_response->addCommand(new InvokeCommand('#edit-customer-phone', 'val', [$customer->field_phone->value]));
		$ajax_response->addCommand(new InvokeCommand('#edit-customer-email', 'val', [$customer->field_email->value]));
		$ajax_response->addCommand(new InvokeCommand('#edit-customer-address', 'val', [$customer->field_address->value]));
		$ajax_response->addCommand(new InvokeCommand('#edit-customer-uniform-num', 'val', [$customer->field_uniform_number->value]));
		$ajax_response->addCommand(new InvokeCommand('#edit-customer-contact-window', 'val', [$customer->field_contact_person->value]));
		$ajax_response->addCommand(new InvokeCommand('#edit-customer-cell', 'val', [$customer->field_mobile->value]));
		$ajax_response->addCommand(new InvokeCommand('#edit-customer-payment-due', 'val', [get_entity_storage_label($customer, 'field_payment_due', $customer->field_payment_due->value)]));
        return $ajax_response;
}

function ajax_product_loading(array $form, FormStateInterface $form_state) {
        $ajax_response = new AjaxResponse();
		$product_nid = $form_state->getValue('list_product');
		$stock_up_nids = \Drupal::entityQuery("node")
                    					->condition('type', 'stock_up')
										->condition('field_product_goods', $product_nid)
                    					->execute();
		$product = \Drupal\node\Entity\Node::load($product_nid);
		$storage_list = array('_none' => '- None -');
		
		foreach($stock_up_nids as $stock_up_nid) {
			$stock_up = \Drupal\node\Entity\Node::load($stock_up_nid);
			$storage_nid = $stock_up->field_storage_id->target_id;
			$storage = \Drupal\node\Entity\Node::load($storage_nid);
			$storage_list[$storage_nid] = $storage->field_storage_name->value;
		}
		
		$form['storage']['#options'] = $storage_list;
		$form['storage']['#attributes'] = ['class' => 'edit-storage'];
		$form['storage']['#default_value'] = '_none';
		$ajax_response->addCommand(new InvokeCommand('#edit-product-name', 'val', [$product->field_product_name->value]));
		$ajax_response->addCommand(new ReplaceCommand('#edit-storage-select', $form['storage']));
		$ajax_response->addCommand(new InvokeCommand('#edit-price', 'val', [$product->field_construction_price->value]));
		$ajax_response->addCommand(new InvokeCommand('#edit-total-amount', 'val', ['0']));

		$customr_nid = $form_state->getValue('field_customer_entity')[0]['target_id'];
		if ( !empty($customr_nid) ) {
			$url = "/admin/view/$product_nid/history-sell-item/$customr_nid";
			$hyperlink = '<a class="use-ajax" data-dialog-options="{&quot;width&quot;:900}" data-dialog-type="dialog" href=' . $url . '>產品對此客戶的歷史紀錄</a>';
			$ajax_response->addCommand(new HtmlCommand('.to-sell-item-list-by-all', $hyperlink));
			
			$url = "/admin/view/$product_nid/history-sell-item/none";
			$hyperlink = '<a class="use-ajax" data-dialog-options="{&quot;width&quot;:900}" data-dialog-type="dialog" href=' . $url . '>產品對所有客戶的歷史紀錄</a>';
			$ajax_response->addCommand(new HtmlCommand('.to-sell-item-list-by-product', $hyperlink));
		}
		
        return $ajax_response;
}

function ajax_quantity_base_on_select(array $form, FormStateInterface $form_state) {
	$ajax_response = new AjaxResponse();
	$storage_id = $form_state->getValue('storage');
	$product_nid = $form_state->getValue('list_product');
	$stock_up_nids = \Drupal::entityQuery("node")
                    					->condition('type', 'stock_up')
										->condition('field_product_goods', $product_nid)
										->condition('field_storage_id', $storage_id)
                    					->execute();
	$number_in_stock = 0;
	foreach($stock_up_nids as $stock_up_nid) {
		$stock_up = \Drupal\node\Entity\Node::load($stock_up_nid);
		$number_in_stock = $number_in_stock + $stock_up->field_stock->value;
	}
	$ajax_response->addCommand(new InvokeCommand('#edit-quantity', 'attr', ['max', $number_in_stock]));
	$ajax_response->addCommand(new InvokeCommand('#edit-quantity', 'val', ['0']));

	return $ajax_response;
}

function ajax_calculate_price(array $form, FormStateInterface $form_state) {
	$ajax_response = new AjaxResponse();
	$quantity = (int)$form_state->getValue('quantity');
	$price = (int)$form_state->getValue('price');
	$discount = (double)$form_state->getValue('discount');
	
	$product_nid = $form_state->getValue('list_product');	
	$product = \Drupal\node\Entity\Node::load($product_nid);
	$cost = $product->field_cost_price->value;

	$gpm = round(caculate_gpm_for_item_sell($price, $discount, $cost), 2);

	$total_amount = 0;
	if ( empty($discount) || $discount <= 0 ) {
		$tota_amount = $quantity*$price;
	} else {
		$discount = $discount/100;
		$discount_price = $price - ($price*$discount);
		$tota_amount = $discount_price*$quantity;
	}

	$ajax_response->addCommand(new InvokeCommand('#edit-total-amount', 'val', [$tota_amount]));
	$ajax_response->addCommand(new InvokeCommand('#edit-gross-profit-margin', 'val', [$gpm]));

	return $ajax_response;
}

/**
   * AJAX callback handler that displays any errors or a success message.
   */
function create_single_item_callback(array $form, FormStateInterface $form_state) {
	$response = new AjaxResponse();
	$status = "";
	$entity = $form_state->getFormObject()->getEntity();
	if ( !empty($entity->id()) ) {
		if ( empty($form_state->getValue('list_product')) || empty($form_state->getValue('quantity')) || $form_state->getValue('storage') == '_none' ) {
			$status = '<font color="red">產品編號, 倉庫和數量必填!</font>';	
		} else {
			$item_id = gen_sell_item_id($entity->title->value);
			$item = \Drupal\taxonomy\Entity\Term::create(['vid' => 'sell_items']);
			$item->set('name', $item_id);
			$item->field_order_id->target_id = $entity->id();
			$item->set('field_product_id', $form_state->getValue('list_product'));
			$item->set('field_storage', $form_state->getValue('storage'));
			$item->set('field_quantity', $form_state->getValue('quantity'));
			$item->set('field_price', $form_state->getValue('price'));
			$item->set('field_discount', $form_state->getValue('discount'));
			$item->set('field_gross_profit_margin', $form_state->getValue('gross_profit_margin'));
			$item->set('field_total_amount', $form_state->getValue('total_amount'));
			$item->save();
			//$form_state->set('field_sell_products', $item->id());
			$connection = \Drupal::database();
			$obj = $connection->query("SELECT entity_id, MAX(delta) as num FROM {node__field_sell_products} Where 
															entity_id = :nid", [':nid' => $entity->id()])->fetchAll();
			$num = 0;
			if ( !empty($obj[0]->entity_id) ) {
				$num = $obj[0]->num + 1;
			}
			$connection->insert('node__field_sell_products')->fields([
																'bundle' => $entity->bundle(),
																'entity_id' => $entity->id(),
																'revision_id' => $entity->vid->value,
																'langcode' => 'en',
																'delta' => $num,
																'field_sell_products_target_id' => $item->id()])->execute();
		
			$connection->insert('node_revision__field_sell_products')->fields([
																	'bundle' => $entity->bundle(),
																	'entity_id' => $entity->id(),
																	'revision_id' => $entity->vid->value,
																	'langcode' => 'en',
																	'delta' => $num,
																	'field_sell_products_target_id' => $item->id()])->execute();
			\Drupal::service('cache.entity')->invalidateAll();
			\Drupal::service('cache.data')->invalidateAll();
			\Drupal::service('cache.render')->invalidateAll();
			//$form['field_sell_products']['widget'][0]['target_id']['#default_value'] = $item->id();
			$status = '<font color="blue">新增成功!</font>';

			$table = purchase_items_table_generate($entity->id());
			$response->addCommand(new HtmlCommand('#sell-item-table', $table));
		}
	} else {
		$status = '<font color="red">此銷售單還不在資料庫, 請先儲存建立此銷售單!</font>';
	}

	$response->addCommand(new HtmlCommand('.to-sell-item-list-by-all', ""));	
	$response->addCommand(new HtmlCommand('.to-sell-item-list-by-product', ""));

	$response->addCommand(new HtmlCommand('.add-item-status-message', $status));
	$response->addCommand(new InvokeCommand('#edit-list-product', 'val', [""]));
	$response->addCommand(new InvokeCommand('#edit-product-name', 'val', [""]));
	$form['storage']['#options'] = array('_none' => '- None -');
	$form['storage']['#default_value'] = '_none';
	$response->addCommand(new ReplaceCommand('#edit-storage-select', $form['storage']));
	$response->addCommand(new InvokeCommand('#edit-price', 'val', [""]));
	$response->addCommand(new InvokeCommand('#edit-gross-profit-margin', 'val', [""]));
	$response->addCommand(new InvokeCommand('#edit-discount', 'val', [""]));
	$response->addCommand(new InvokeCommand('#edit-quantity', 'val', [""]));
	$response->addCommand(new InvokeCommand('#edit-total-amount', 'val', [""]));
    return $response;
}

function purchase_items_table_generate($order_id) {
	$tids = \Drupal::entityQuery("taxonomy_term")->condition("vid", "sell_items")
				->condition('field_order_id', $order_id)
				->execute();
	$table = "";
	if ( count($tids) == 0 ) {
		$table = '<div id="sell-item-table"></div>';
		return $table;
	}

	$table = '<div id="sell-item-table"><table>-BODY-</table></div>';
	$table_head = "<thead><tr><td>產品訂單編號</td><td>產品型號</td><td>產品名稱</td><td>倉庫</td><td>數量</td><td>單價</td><td>折扣(%)</td><td>毛利率(%)</td><td>金額</td><td></td></tr></thead>";
	$table_body_begin = '<tbody>';
	$table_body = '';
	$total_quantity = 0;
	$sum = 0;
	$total_cost = 0;
	
	foreach($tids as $tid) {
		$item = \Drupal\taxonomy\Entity\Term::load($tid);
		$product = \Drupal\node\Entity\Node::load($item->field_product_id->target_id);
		$storage = \Drupal\node\Entity\Node::load($item->field_storage->target_id);

		$dropdown_button = '<div class="dropbutton-wrapper dropbutton-multiple">
					<div class="dropbutton-widget">
						<ul class="dropbutton">
							<li class="edit dropbutton-action">
								<a href="/taxonomy/term/' . $tid .'/edit?destination=/node/' . $order_id .'/edit" hreflang="en">Edit</a>
							</li>
							<li class="dropbutton-toggle">
								<button type="button">
									<span class="dropbutton-arrow">
										<span class="visually-hidden">List additional actions</span>
									</span>
								</button>
							</li>
							<li class="delete dropbutton-action secondary-action">
								<a href="/taxonomy/term/' . $tid .'/delete?destination=/node/' . $order_id .'/edit" hreflang="en">Delete</a>
							</li>
						</ul>
					</div>
				</div>';
		$table_body .= '<tr><td>' . $item->name->value . '</td><td>' . $product->title->value . '</td><td>' . $product->field_product_name->value . '</td><td>' . $storage->field_storage_name->value . '</td><td>' . number_format($item->field_quantity->value) . '</td><td>' . number_format($item->field_price->value) . '</td><td>' . $item->field_discount->value . '</td><td>' . $item->field_gross_profit_margin->value . '</td><td>' . number_format($item->field_total_amount->value) . '</td><td>' . $dropdown_button . '</td></tr>';
		$total_quantity = $total_quantity + $item->field_quantity->value;
		$sum = $sum + $item->field_price->value;
		$total_cost = $total_cost + $item->field_total_amount->value;
	}
	$table_body .= '<tr><td><strong>總合</strong></td><td></td><td></td><td></td><td><strong>' . number_format($total_quantity) . '</strong></td><td><strong>$' . number_format($sum) . '</strong></td><td></td><td></td><td><strong>$' . number_format($total_cost) . '</strong></td><td></td></tr>';
	$table_body_end = '</tbody>';

	$table_body = $table_head . $table_body_begin . $table_body . $table_body_end;
	$table = str_replace('-BODY-', $table_body, $table);
	
	return $table;
}

function generate_bill_callback(array $form, FormStateInterface $form_state) {
	$response = new AjaxResponse();
	$entity = $form_state->getFormObject()->getEntity();
	$entity = \Drupal\node\Entity\Node::load($entity->id());
	if ( !empty($entity->id()) ) {
		$query = \Drupal::entityQuery("node")
                    					->condition('type', 'billing')
										->condition('field_order_id', $entity->id())
                    					->execute();
		if ( count($query) == 0 ) {
			$bill = \Drupal\node\Entity\Node::create(['type' => "billing",]);
			$bill->set('title', generate_unique_id_for_bill());
			if ( $entity->moderation_state->value == "return" ) {
				$bill->field_bill_type->value = "return";
				$bill->set('field_expected_receive_payment', date('Y-m-d', time()));
			}
			$bill->field_order_id->target_id = $entity->id();
			$bill->field_customer_entity->target_id = $entity->field_customer_entity->target_id;
			$config = \Drupal::config ( 'common_utils.settings' );
			$bill->set('field_tax_rate', $config->get('sales_tax'));
			$bill->save();
			//$bill = \Drupal\node\Entity\Node::load($bill->id());
			$connection = \Drupal::database();
			$connection->insert('node__field_bill')->fields([
															'bundle' => $entity->bundle(),
															'entity_id' => $entity->id(),
															'revision_id' => $entity->vid->value,
															'langcode' => 'en',
															'delta' => 1,
															'field_bill_target_id' => $bill->nid->value])->execute();
			$connection->insert('node_revision__field_bill')->fields([
															'bundle' => $entity->bundle(),
															'entity_id' => $entity->id(),
															'revision_id' => $entity->vid->value,
															'langcode' => 'en',
															'delta' => 1,
															'field_bill_target_id' => $bill->nid->value])->execute();
			\Drupal::service('cache.entity')->invalidateAll();
			\Drupal::service('cache.data')->invalidateAll();
			\Drupal::service('cache.render')->invalidateAll();
			
			$response->addCommand(new HtmlCommand('.total-amount-without-tax', t('未含稅總價  $') . $bill->field_total_amount_without_tax->value));
			$response->addCommand(new HtmlCommand('.tax', t('+稅金  $') . $bill->field_tax->value));
			$response->addCommand(new HtmlCommand('.total-amount-with-tax', t('=含稅總價  $') . $bill->field_total_amount_with_tax->value));
			if ( $node->moderation_state->value != "return_completed" && $node->moderation_state->value != "return" ) {
				$response->addCommand(new HtmlCommand('.deposite', t('-訂金  $') . number_format($bill->field_deposit->value)));
				$response->addCommand(new HtmlCommand('.discount', t('-折讓金額  $') . number_format($bill->field_discount->value)));
			}
			$response->addCommand(new HtmlCommand('.remain-amount', t('=剩餘末支付含稅總價  $') . ($bill->field_total_amount_with_tax->value - $bill->field_deposit->value)));
			$response->addCommand(new HtmlCommand('.bill-link', '<a target="_blank" href="/node/' . $bill->id() . '/edit">帳單己建立, 連接到帳單</a>'));
			$response->addCommand(new RemoveCommand('.generate-bill'));
		}
	}
	
	return $response;
}

/*function table_regenerate_callback(array $form, FormStateInterface $form_state) {
	$response = new AjaxResponse();
	$entity = $form_state->getFormObject()->getEntity();
	$status = "";
	if ( !empty($entity->id()) ) {
		$table = purchase_items_table_generate($entity->id());
		$response->addCommand(new HtmlCommand('#sell-item-table', $table));
	} else {
		$status = '<font color="red">無訂單項目可以整理!</font>';
		$response->addCommand(new HtmlCommand('.add-item-status-message', $status));
	}
    return $response;
}*/

/**
   * AJAX callback handler that displays any errors or a success message.
   */
/*function add_item_to_order_callback(array $form, FormStateInterface $form_state) {
	$so_id = $form_state->getValue('title')[0]['value'];

    $response = new AjaxResponse();

    $modal_form = \Drupal::formBuilder()->getForm('Drupal\sales_order_content_type\Form\AddItemToOrderModalForm', $so_id);

    $response->addCommand(new OpenModalDialogCommand("新增購物產品", $modal_form, ['width' => 500]));

    return $response;
}*/

function shipping($node) {
	$table_start = '<table id="sales-oder-table-list"><tbody>';
	$table_body = '<tr><th width="50px">欄號</th><th>產品型號</th><th>產品名稱</th><th width="70px">數量</th><th width="95px">出貨狀態</th><th width="105px">出貨倉庫</th><th width="115px">寄貨倉庫</th></tr>';
	$tids = \Drupal::entityQuery("taxonomy_term")->condition("vid", "sell_items")
				->condition('field_order_id', $node->nid->value)
				->execute();
	$index = 0;
	foreach($tids as $tid) {
		$item = \Drupal\taxonomy\Entity\Term::load($tid);
		$product = \Drupal\node\Entity\Node::load($item->field_product_id->target_id);
		$index++;
		$table_body .= '<tr><td>' . $index . '</td><td><a href="/taxonomy/term/' .$tid . '/edit" target="blank">' . $product->title->value . '</a></td><td>' . $product->field_product_name->value . 
						'</td><td align="right">' . number_format($item->field_quantity->value) . 
						'</td><td  align="right">' . get_entity_storage_label($item, "field_requisition_status", $item->field_requisition_status->value) . 
						'</td><td  align="right">' . get_storage_name_by_nid($item->field_storage->target_id) . 
						'</td><td  align="right">' . get_storage_name_by_nid($item->field_temporary_storage->target_id) .'</td></tr>'
						;
		if ( !empty($item->field_comments->value) ) {
			$table_body .= '<tr><td colspan="7" align="left">加註: ' . $item->field_comments->value . '</td></tr>';
		}
	}
	$table_body .= '<tr class="sales-oder-table-list-bottom"><td colspan="7" align="center"> (以下空白) </td></tr>'; 
	$table_end = "</tbody></table>"; 
	$table_list = $table_start . $table_body . $table_end;
	return $table_list;
}

function typeOfShipment($node) {
	$type = 0;
	$tids = \Drupal::entityQuery("taxonomy_term")->condition("vid", "sell_items")
					->condition('field_order_id', $node->nid->value)
					->execute();
	foreach($tids as $tid) {
		$item = \Drupal\taxonomy\Entity\Term::load($tid);
		if ( ($type == 0 || $type == 3) && $item->field_requisition_status->value == "packed" ) {
			$type = $type + 1;
		} else if ( ($type == 0 || $type == 1) && $item->field_requisition_status->value == "transferred" ) {
			$type = $type + 3;
		}
	}
	return $type;
}

function num_of_sell_items($nid) {
	$sell_items_tids = \Drupal::entityQuery("taxonomy_term")
									->condition('vid', 'sell_items')
									->condition('field_order_id', $nid)->execute();
	return count($sell_items_tids);
}

function generate_sale_id() {
	$sales_order_id = "SO-" . date("Ymd");
	while (true) {
		$query = \Drupal::entityQuery("node")
								->condition('type', 'sales_order')
								->condition('title', $sales_order_id, "CONTAINS")
								->execute();
		if ( sizeof($query) == 0 ) {
			$sales_order_id = "$sales_order_id-1";
		} else {
			$sales_order_id =  $sales_order_id . "-" . (count($query)+ 1);
		}

		$check = \Drupal::entityQuery("node")
								->condition('type', 'sales_order')
								->condition('title', $sales_order_id)
								->execute();

		if ( sizeof($check) == 0 ) {
			break;
		}
	}
	return $sales_order_id;
}

function caculate_gpm_for_item_sell($price, $discount, $cost) {
	return ($price * (1-($discount/100)) - $cost) / ( $price * (1-($discount/100))) * 100;
}

function getSellOrderID($nid) {
	$sale = \Drupal\node\Entity\Node::load($nid);
	return $sale->title->value;
}
