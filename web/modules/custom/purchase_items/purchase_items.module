<?php
use \Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\InvokeCommand;
use Drupal\Core\Ajax\HtmlCommand;
use Drupal\Core\Ajax;

/**
 * @ignore
 */
function purchase_items_taxonomy_term_insert($term) {
    if ($term->bundle() === "purchase_items") {
        $purchase_form = \Drupal\node\Entity\Node::load($term->field_order_id->target_id);
        if ( !empty($purchase_form->field_bill_purchase->target_id) ) {
            $bill = \Drupal\node\Entity\Node::load($purchase_form->field_bill_purchase->target_id);
            $bill->save();
        }
    }
}

/**
 * @ignore
 */
function purchase_items_taxonomy_term_update($term) {
    if ($term->bundle() === "purchase_items") {
        $purchase_form = \Drupal\node\Entity\Node::load($term->field_order_id->target_id);
        if ( !empty($purchase_form->field_bill_purchase->target_id) ) {
            $bill = \Drupal\node\Entity\Node::load($purchase_form->field_bill_purchase->target_id);
            $bill->save();
        }
    }
}

/**
 * @ignore
 */
function purchase_items_taxonomy_term_delete($term) {
    if ($term->bundle() === "purchase_items") {
        if ( !empty($term->field_purchase_requisition_statu->value) ) {
            pi_revert_inventory($term);
        }
        \Drupal::messenger()->addMessage($term->name->value . "成功刪除.", "status");

        //remove from 銷售單
        $purchase_nid = $term->field_order_id->target_id;
        $purchase = \Drupal\node\Entity\Node::load($purchase_nid);
        $purchase_vid = $purchase->vid->value;

        $connection = \Drupal::database();
        $connection->delete('node__field_material')
                            ->condition("entity_id", $purchase_nid)
                            ->condition("revision_id", $purchase_vid)
                            ->condition("field_material_target_id", $term->id())
                            ->execute();
        $connection->delete('node_revision__field_material')
                            ->condition("entity_id", $purchase_nid)
                            ->condition("revision_id", $purchase_vid)
                            ->condition("field_material_target_id", $term->id())
                            ->execute();
        \Drupal::service('cache.entity')->invalidateAll();
        \Drupal::service('cache.data')->invalidateAll();
        \Drupal::service('cache.render')->invalidateAll();
    }
}

/**
 * @ignore
 */
function purchase_items_taxonomy_term_presave($term) {
	if ( $term->bundle() == "purchase_items" ) {
        $term->status->value = false;
        if ( $term->isNew() ) {
            $term->set('name', gen_purchase_item_id());
        }

        $original_term = $term->original;

        //1. history status 沒有, current status 有
        //2. history status 有, current status 沒有

        if ( empty($original_term->field_purchase_requisition_statu->value) && !empty($term->field_purchase_requisition_statu->value) ) {
            pi_update_inventory($term);
        } else if ( !empty($original_term->field_purchase_requisition_statu->value) && empty($term->field_purchase_requisition_statu->value) ) {
            pi_revert_inventory($original_term);
        }
    }
}

/**
 * purchase item revert from inventory.
 * 
 * @param term $original - entity taxonomy term
 */
function pi_revert_inventory($original) {
    $inventory_nids = \Drupal::entityQuery("node")->condition('type', 'stock_up')
                            ->condition('field_product_goods', $original->field_product_goods->target_id)
                            ->condition('field_storage_id', $original->field_storage->target_id)->execute();
    foreach($inventory_nids as $inventory_nid) {
        $inventory = \Drupal\node\Entity\Node::load($inventory_nid);
        $before_quantity = $inventory->field_stock->value;
        $after_quantity = $inventory->field_stock->value - $original->field_quantity->value;
        $inventory->set('field_stock', $after_quantity);
        $inventory->save();
        create_warehouse_transaction_log($original->field_product_goods->target_id, "", $original->field_storage->target_id, "return", $original->field_quantity->value, $before_quantity, $after_quantity, get_purchase_order_number_by_nid($original->field_order_id->target_id), "");
        $message = get_goods_name_by_nid($original->field_product_goods->target_id) . "退倉取消, 從倉庫移除成功. 儲存在 " . get_storage_name_by_nid($original->field_storage->target_id) . " 的庫存數量 " . $after_quantity; 
        \Drupal::messenger()->addMessage($message);
        break;
    }
}

/**
 * purchase item update on inventory.
 * 
 * @param term $term - entity taxonomy term
 */
function pi_update_inventory($term) {
    $stock_up_nids = \Drupal::entityQuery("node")->condition('type', 'stock_up')
                            ->condition('field_product_goods', $term->field_product_goods->target_id)
                            ->condition('field_storage_id', $term->field_storage->target_id)->execute();
    if ( $term->field_purchase_requisition_statu->value == "put" ) {
        if ( count($stock_up_nids) == 0 ) {
            $inventory = \Drupal\node\Entity\Node::create(['type' => "stock_up",]);
            $inventory->set('field_storage_id', $term->field_storage->target_id);
            $inventory->set('field_product_goods', $term->field_product_goods->target_id);
            $inventory->set('field_stock', 0);
            $inventory->save();
            $message = get_goods_name_by_nid($term->field_product_goods->target_id) . " 不存在存入倉庫. 以在存入倉庫 " . get_storage_name_by_nid($term->field_storage->target_id) . " 建立此物品."; 
            \Drupal::messenger()->addMessage($message);
            $inventory->set('field_stock', $term->field_quantity->value);
            $inventory->save();
            $message = get_goods_name_by_nid($term->field_product_goods->target_id) . " 存入在 " . get_storage_name_by_nid($term->field_storage->target_id) . " 的庫存數量 " . $term->field_quantity->value; 
            \Drupal::messenger()->addMessage($message);
            create_warehouse_transaction_log($term->field_product_goods->target_id, "", $term->field_storage->target_id, "inbound", 0, $before_quantity, $term->field_quantity->value, get_purchase_order_number_by_nid($term->field_order_id->target_id), "");
        } else {
            foreach($stock_up_nids as $stock_up_nid) {
                $stock_up = \Drupal\node\Entity\Node::load($stock_up_nid);
                $before_quantity = $stock_up->field_stock->value;
                $after_quantity = $stock_up->field_stock->value + $term->field_quantity->value;
                $stock_up->set('field_stock', $after_quantity);
                $stock_up->save();
                create_warehouse_transaction_log($term->field_product_goods->target_id, "", $term->field_storage->target_id, "inbound", $term->field_quantity->value, $before_quantity, $after_quantity, get_purchase_order_number_by_nid($term->field_order_id->target_id), "");
                $message = get_product_or_goods_name_by_nid($term->field_product_goods->target_id) . " 儲存在 " . get_storage_name_by_nid($term->field_storage->target_id) . " 的庫存是 " . $after_quantity; 
                \Drupal::messenger()->addMessage($message);
                break;
            }
        }
    }
}

/**
 * @ignore
 */
function purchase_items_form_alter(&$form, FormStateInterface &$form_state, $form_id) {
    if ( $form_id == "taxonomy_term_purchase_items_form" ) {
        $term = $form_state->getFormObject()->getEntity();
        if ( $term->isNew() ) {
            $form ['name']['widget'][0]['value']['#default_value'] = gen_purchase_item_id();
        }
        $form ['name']['widget'][0]['value']['#disabled'] = true;
        $form ['field_order_id']['#disabled'] = true;
        $form ['field_product_goods']['#disabled'] = true;

        /*$form['field_storage']['widget']['#ajax'] = array(
            'callback' => 'ajax_storage',
            'event' => 'change',
        );*/

        $form['message_for_storage'] = array(
			'#type' => 'markup',
			'#markup' => '<div class="message-for-storage"></div>',
            '#weight' => 3,
        );

        $form['field_quantity']['widget'][0]['value']['#ajax'] = array(
            'callback' => 'ajax_purchase_items_calculate_price',
			'event' => 'change',
        );

        $form['field_price']['widget'][0]['value']['#ajax'] = array(
            'callback' => 'ajax_purchase_items_calculate_price',
			'event' => 'change',
        );

        $form['field_purchase_requisition_statu']['widget']['#ajax'] = [
			'callback' => 'ajax_purchase_requisition_status_changed',
			'event' => 'change',
		];

        if ( !empty($term->field_order_id->target_id) ) {
            $node = \Drupal\node\Entity\Node::load($term->field_order_id->target_id);
            if ( !empty($node->field_bill_purchase->target_id) ) {
                $bill = \Drupal\node\Entity\Node::load($node->field_bill_purchase->target_id);
                if ( !empty($bill->field_actual_received_payment->value) ) {
                    $form['actions']['submit']['#disabled'] = true;
                    $form['actions']["delete"]['#attributes']['style'] = 'display: none;';
                }
            }
        }

        $form['#validate'][] = 'purchase_items_form_validate';
    }
}

/**
 * @ignore
 */
function ajax_purchase_items_calculate_price(array $form, FormStateInterface $form_state) {
	$ajax_response = new AjaxResponse();
	$quantity = (int)$form_state->getValue('field_quantity')[0]['value'];
	$price = (int)$form_state->getValue('field_price')[0]['value'];
	$discount = (double)$form_state->getValue('field_discount')[0]['value'];
	$total_amount = 0;
	
	$tota_amount = $quantity*$price;

	$ajax_response->addCommand(new InvokeCommand('#edit-field-total-amount-0-value', 'val', [$tota_amount]));

	return $ajax_response;
}

/*function ajax_storage(array $form, FormStateInterface $form_state) {
    $ajax_response = new AjaxResponse();
    $message = "";
    $storage_nid = $form_state->getValue('field_storage')[0]['target_id'];
    if ( $storage_nid != 0 ) {
        $product_goods_nid = $form_state->getValue('field_product_goods')[0]['target_id'];
        $stock_up_nids = \Drupal::entityQuery("node")
                                ->condition('type', 'stock_up')
                                ->condition('field_storage_id', $storage_nid)
                                ->condition('field_product_goods', $product_goods_nid)
                                ->execute();
        if ( count($stock_up_nids) == 0 ) {
            $message = '<font color="red">倉儲沒有這物品, 請先點此<a href="/node/add/stock_up" target="_blank">連接</a>以手動建立此物品在倉儲.</font>';
            
        }
    }
    
    $ajax_response->addCommand(new HtmlCommand('.message-for-storage', $message));
    return $ajax_response;
}*/

/**
 * @ignore
 */
function purchase_items_form_validate($form, &$form_state) {
    if ( $form_state->getValue('field_purchase_requisition_statu')[0]['value'] == "put" && empty($form_state->getValue('field_storage')) ) {
        $form_state->setError($form , t('無法儲存, 存入倉庫沒選.'));
    }
}

/**
 * generate purchase item unique id.
 * 
 * @param int @order_id - purcahse order id
 * @return string - unique id
 */
function gen_purchase_item_id($order_id = null) {
    $total = \Drupal::entityQuery("taxonomy_term")
                    ->condition("vid", "purchase_items")
                    ->execute();
    if ( $order_id == null ) {
        return "PI-" . date("md") . "-" . (count($total) + 1);
    } else {
        $replace = substr($order_id, 0, 7);
        return str_replace($replace, "PI-", $order_id) . "-" . (count($total)+1);
    }
}





