<?php
use \Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\InvokeCommand;
use Drupal\Core\Ajax\HtmlCommand;
use Drupal\Core\Url;
use Drupal\Core\Ajax;
use Drupal\Core\Ajax\ReplaceCommand;
use Drupal\Core\Ajax\RemoveCommand;

const PURCHASE_MODERATION_STATE_LABEL = array(
        'draft' => '草稿',
        'purchase_rate' => '採購詢價中',
        'purchase_import' => '採購進貨中',
		'materials_arrived' => '採購貨物已簽收',
		'materials_inbound' => '採購貨物已入倉',
        'purchase_done' => '採購已完成',
);

function purchase_order_preprocess_node(&$variables) {
	$variables['company'] = \Drupal::config('common_utils.settings')->get('company');
	$variables['company_address'] = \Drupal::config('common_utils.settings')->get('company_address');
	$variables['company_phone'] = \Drupal::config('common_utils.settings')->get('company_phone');
	$variables['company_fax'] = \Drupal::config('common_utils.settings')->get('company_fax');
	$node = \Drupal::routeMatch()->getParameter('node');
    if ($node instanceof \Drupal\node\NodeInterface) {
		if ($node->bundle() == 'purchase_order') {
			$variables['purchase_order'] = ['#markup' => purchase_order_table_generator_in_view($node)];
		}
	}
}

function purchase_order_node_presave(Drupal\Core\Entity\EntityInterface $node) {
	if ( $node->type->target_id == "purchase_order" ) {
		if ( $node->moderation_state->value == "purchase_rate" ) {
			$node->set('field_appraise_date', date('Y-m-d', time()));
		} else if ( $node->moderation_state->value == "purchase_import" ) {
			$node->set('field_shipping_date', date('Y-m-d', time()));
			$bill_nid = $node->field_bill_purchase->target_id;
			if ( !empty($bill_nid) ) {
				$bill = \Drupal\node\Entity\Node::load($bill_nid);
				$bill->set('field_expected_receive_payment', $node->field_shipping_date->value);
				$bill->save();
			} else {
				$bill = \Drupal\node\Entity\Node::create(['type' => "bill_4_purchase",]);
				$bill->set('field_expected_receive_payment', $node->field_shipping_date->value);
				$bill->field_order_id->target_id = $node->id();
				$bill->field_vendor_entity->target_id = $node->field_vendor_entity->target_id;
				$bill->save();
				$node->set('field_bill_purchase', $bill->id());
			} 
		} else if ( $node->moderation_state->value == "materials_arrived" ) {
			$node->set('field_shipping_received_date', date('Y-m-d', time()));
		} else if ( $node->moderation_state->value == "materials_inbound" ) {
			$node->set('field_inbound_date', date('Y-m-d', time()));
		} else if ( $node->moderation_state->value == "purchase_done" ) {
			$node->set('field_completed_date', date('Y-m-d', time()));
			$field_materials = $node->get('field_material')->getValue();

			for ($i=0; $i < count($field_materials); $i++) {
				$purchase_item = \Drupal\taxonomy\Entity\Term::load($field_materials[$i]['target_id']);
				$new_cost_price = $purchase_item->field_price->value;
				$product_good_nid = $purchase_item->field_product_goods->target_id;
				$product_good = \Drupal\node\Entity\Node::load($product_good_nid);
				$original_cost_price = $product_good->field_cost_price->value;
				if ( $original_cost_price != $new_cost_price) {
					$product_good->set('field_cost_price', $new_cost_price);
					$product_good->setRevisionCreationTime(REQUEST_TIME);
					$product_good->set( 'revision_log', "新進採購, 更改成本價從$" . "$original_cost_price 調到 $" . $new_cost_price);
					$product_good->save();
					$nids = \Drupal::entityQuery("node")->condition('type', 'product')
										->condition('field_product_goods', $product_good_nid)->execute();
					foreach($nids as $nid) {
						$master_product = \Drupal\node\Entity\Node::load($nid);
						$parts_nids = $master_product->get('field_product_goods')->getValue();
						$total_cost = 0;
						for($j=0; $j < count($parts_nids); $j++) {
							$parts_nid = $parts_nids[$j]['target_id'];
							$part = \Drupal\node\Entity\Node::load($parts_nid);
							$total_cost = $total_cost + $part->field_cost_price->value;
						}
						$original_cost_price = $master_product->field_cost_price->value;
						$master_product->set('field_cost_price', $total_cost);
						$master_product->setRevisionCreationTime(REQUEST_TIME);
						$master_product->set( 'revision_log', "新進採購 " . $product_good->title->value . " 更改成本價從$" . "$original_cost_price 調到 $" . $total_cost);
						$master_product->save();
					}
				}
			}
		}
		if ( !$node->isNew() ) {
			$node->set('revision_log', PURCHASE_MODERATION_STATE_LABEL[$node->moderation_state->value] . " 狀態儲存.");
			if ( empty($node->field_material->target_id) ) {
				$tids = \Drupal::entityQuery("taxonomy_term")->condition("vid", "purchase_items")
									->condition('field_order_id', $node->id())
									->execute();
				foreach($tids as $tid) {
					$purchase_item = \Drupal\taxonomy\Entity\Term::load($tid);
					$node->field_material[] = $purchase_item;
				}
			}
		}
	}
}

/**
 * Implements hook_page_preprocess_html().
 */
function purchase_order_preprocess_html(&$variables) {
    //Add JS and CSS library
    $variables['#attached']['library'][] = 'purchase_order/purchase_order';
}

function purchase_order_form_alter(&$form, FormStateInterface &$form_state, $form_id) {
	if ( $form_id === 'node_purchase_order_form' || $form_id == 'node_purchase_order_edit_form' ) {
		$node = $form_state->getFormObject()->getEntity();
		/*-----------------採購資訊---------------------*/
		$form['purchase_info'] = array(
						'#group' => 'advanced',
						'#type' => 'details',
						'#title' => t('採購資訊'),
						'#attributes' => [
							'class' => ['node-form-options']
						],
						'#attached' => [
							'library' => ['node/drupal.node'],
						],
						'#open' => true,
						'#open' => true,
        );
		$form['title']['#group'] = 'purchase_info';
		$form['title']['#disabled'] = true;
		$form['field_purchase_status']['#group'] = 'purchase_info';

		$form['field_created_date']['#group'] = 'purchase_info';
		if ($form['field_created_date']['widget'][0]['value']['#default_value'] == '') {
			$form['field_created_date']['#access'] = FALSE;
		} else {
			$form['field_created_date']['widget'][0]['value']['#description'] = $form['field_created_date']['widget'][0]['value']['#default_value']->format('Y/m/d');
		}
		$form['field_appraise_date']['#group'] = 'purchase_info';
		if ($form['field_appraise_date']['widget'][0]['value']['#default_value'] == '') {
			$form['field_appraise_date']['#access'] = FALSE;
		} else {
			$form['field_appraise_date']['widget'][0]['value']['#description'] = $form['field_appraise_date']['widget'][0]['value']['#default_value']->format('Y/m/d');
		}
		$form['field_shipping_date']['#group'] = 'purchase_info';
		if ($form['field_shipping_date']['widget'][0]['value']['#default_value'] == '') {
			$form['field_shipping_date']['#access'] = FALSE;
		} else {
			$form['field_shipping_date']['widget'][0]['value']['#description'] = $form['field_shipping_date']['widget'][0]['value']['#default_value']->format('Y/m/d');
		}
		$form['field_shipping_received_date']['#group'] = 'purchase_info';
		if ($form['field_shipping_received_date']['widget'][0]['value']['#default_value'] == '') {
			$form['field_shipping_received_date']['#access'] = FALSE;
		} else {
			$form['field_shipping_received_date']['widget'][0]['value']['#description'] = $form['field_shipping_received_date']['widget'][0]['value']['#default_value']->format('Y/m/d');
		}
		$form['field_inbound_date']['#group'] = 'purchase_info';
		if ($form['field_inbound_date']['widget'][0]['value']['#default_value'] == '') {
			$form['field_inbound_date']['#access'] = FALSE;
		} else {
			$form['field_inbound_date']['widget'][0]['value']['#description'] = $form['field_inbound_date']['widget'][0]['value']['#default_value']->format('Y/m/d');
		}
		$form['field_completed_date']['#group'] = 'purchase_info';
		if ($form['field_completed_date']['widget'][0]['value']['#default_value'] == '') {
			$form['field_completed_date']['#access'] = FALSE;
		} else {
			$form['field_completed_date']['widget'][0]['value']['#description'] = $form['field_completed_date']['widget'][0]['value']['#default_value']->format('Y/m/d');
		}

		$form['purchase_info']['purchase_order_status_message'] = array(
			'#type' => 'markup',
			'#markup' => '<div class="purchase-order-status-message"></div>',
            '#weight' => 3,
        );

		if ( $node->isNew() ) {
			$purchase_order_id = "PO-" . date("Ymd");
			while (true) {
                $query = \Drupal::entityQuery("node")
                    					->condition('type', 'purchase_order')
										->condition('title', $purchase_order_id, "CONTAINS")
                    					->execute();
				if ( sizeof($query) == 0 ) {
					$purchase_order_id = "$purchase_order_id-1";
				} else {
					$purchase_order_id =  $purchase_order_id . "-" . (count($query)+ 1);
				}

				$check = \Drupal::entityQuery("node")
                    					->condition('type', 'purchase_order')
                                        ->condition('title', $purchase_order_id)
                    					->execute();

				if ( sizeof($check) == 0 ) {
					break;
				}
			
			}
			$form ['title']['widget'][0]['value']['#default_value'] = $purchase_order_id;
			$form ['title']['#disabled'] = true;
		} else {
			$vendor_id = $node->field_vendor_entity->target_id;
		}

		/*$form['field_purchase_status']['widget']['#ajax'] = [
			'callback' => 'ajax_vendor_order_status_changed_validation',
			'event' => 'change',
			'wrapper' => 'ajax-change',
		];*/
		/*-----------------廠商資訊---------------------*/
		$form['vendor_info'] = array(
						'#type' => 'details',
						'#title' => t('廠商資訊'),
						'#weight' => -1,
							'#open' => true,
        );

		$form['field_vendor_entity']['widget'][0]['target_id']['#ajax'] = array(
                'callback' => 'ajax_vendor_info_loading',
                'wrapper' => 'ajax-wrapper',
                'event' => 'autocompleteclose change',
        );

		$form['field_vendor_entity']['#group'] = 'vendor_info';
		$form['vendor_title'] = array(
            '#title' => '廠商名稱',
            '#type' => 'textfield',
            '#size' => 60,
			'#weight' => 4,
			'#disabled' => true,
			'#group' => 'vendor_info',
        );
		$form['vendor_contact_window'] = array(
            '#title' => '聯絡人',
            '#type' => 'textfield',
            '#size' => 60,
			'#weight' => 4,
			'#disabled' => true,
			'#group' => 'vendor_info',
        );
		$form['vendor_cell'] = array(
            '#title' => '聯絡人電話',
            '#type' => 'textfield',
            '#size' => 60,
			'#weight' => 4,
			'#disabled' => true,
			'#group' => 'vendor_info',
        );

		if ( !$node->isNew() ) {
			$vendor_nid = $node->field_vendor_entity->target_id;
			$vendor = \Drupal\node\Entity\Node::load($vendor_nid);
			$form['vendor_title']['#default_value'] = $vendor->field_vendor_name->value;
			$form['vendor_contact_window']['#default_value'] = $vendor->field_contact_person->value;
			$form['vendor_cell']['#default_value'] = $vendor->field_mobile->value;
			$form['field_vendor_entity']['#disabled'] = true;
		}
		/*-----------------送貨資訊---------------------*/
		$form['delivery_info'] = array(
						'#type' => 'details',
						'#title' => t('送貨資訊'),
						'#weight' => -1,
							'#open' => true,
        );

		$form['field_logistics']['#group'] = 'delivery_info';
		$form['field_shipping_number']['#group'] = 'delivery_info';

		/******************帳單資訊**********************/
		$form['billing_info'] = array(
						'#group' => 'advanced',
						'#type' => 'details',
						'#title' => t('帳單資訊'),
						'#attributes' => [
							'class' => ['node-form-options']
						],
						'#attached' => [
							'library' => ['node/drupal.node'],
						],
						'#open' => true,
						'#open' => true,
        );
		$form['billing_info']['bill_link'] = array('#type' => 'markup','#markup' => '<div class="purchase-bill-link"></div>');
		if ( !empty($node->field_bill_purchase->target_id) ) {
			$form['billing_info']['bill_link']['#markup'] = '<div class="purchase-bill-link"><a target="_blank" href="/node/' . $node->field_bill_purchase->target_id . '/edit">帳單己建立, 連接到帳單</a></div>';
		} else {
			$form['billing_info']['generate_bill'] = array(
				'#type' => 'submit',
				'#value' => t('產生採購帳單'),
				'#attributes' => [
					'class' => [
						'use-ajax',
					],
				],
				'#ajax' => [
					'callback' => 'generate_purchase_bill_callback',
					'event' => 'click',
				],
				'#prefix' => '<div class="purchase-generate-bill">',
				'#suffix' => '</div>',
			);
		}
		$form['billing_info']['total_amount_with_tax'] = array('#type' => 'markup',
			'#markup' => '<div class="total-amount-with-tax"></div>',
		);
		$form['billing_info']['deposit'] = array('#type' => 'markup',
			'#markup' => '<div class="deposite"></div>',
		);
		$form['billing_info']['write_off_amount'] = array('#type' => 'markup',
			'#markup' => '<div class="write-off-amount"></div>',
		);
		$form['billing_info']['write_off_amount'] = array('#type' => 'markup',
			'#markup' => '<div class="write-off-amount"></div>',
		);
		$form['billing_info']['remain_amount'] = array('#type' => 'markup',
			'#markup' => '<div class="remain-amount"></div>',
		);
		$form['billing_info']['expected_recevied_payment'] = array('#type' => 'markup',
			'#markup' => '<div class="expected-recevied-payment"></div>',
		);
		$form['billing_info']['actual_recevied_payment'] = array('#type' => 'markup',
			'#markup' => '<div class="actual-recevied-payment"></div>',
		);
		$bill = null;
		if ( !empty($node->field_bill_purchase->target_id) ) {
			$bill = \Drupal\node\Entity\Node::load($node->field_bill_purchase->target_id);
			
			$form['billing_info']['total_amount_with_tax']['#markup'] = '<div class="total-amount-with-tax">' . t('含稅總價  $') . number_format($bill->field_total_amount_with_tax->value) . '</div>';
			$form['billing_info']['deposit']['#markup'] = '<div class="deposite">' . t('-訂金  $') . number_format($bill->field_deposit->value) . '</div>';
			$form['billing_info']['write_off_amount']['#markup'] = '<div class="write-off-amount">' . t('-沖銷金額  $') . number_format($bill->field_write_off_amount->value) . '</div>';
			$form['billing_info']['remain_amount']['#markup'] = '<font color="red"><div class="remain-amount">' . t('=剩餘未支付含稅總價  $') . number_format(($bill->field_total_amount_with_tax->value - $bill->field_deposit->value - $bill->field_write_off_amount->value)) . '</div></font>';
			$form['billing_info']['expected_recevied_payment']['#markup'] = '<div class="expected-recevied-payment">' . t('帳款日期  ') . $bill->field_expected_receive_payment->value . '</div>';
			$form['billing_info']['actual_recevied_payment']['#markup'] = '<div class="actual-recevied-payment">' . t('已付款日期  ') . $bill->field_actual_received_payment->value . '</div>';
		}

		/*-----------------新增採購項目---------------------*/
		$form['item_section'] = array(
			'#type' => 'markup',
			'#markup' => '<div class="seven-details__summary">' . t('採購項目') . '</div>',
			'#weight' => 20,
        );

		$form['add_item_status_label'] = array(
            '#prefix' => '<div class="add-purchase-item-status-label">訊息 : ',
			'#suffix' => '</div>',
            '#weight' => $form['item_section']['#weight'] + 1,
        );

		$form['add_item_status_message'] = array(
            '#markup' => '<div class="add-purchase-item-status-message"></div>',
            '#weight' => $form['add_item_status_label']['#weight'] + 1,
        );

        /*$form['merchandise_category'] = [
            '#type' => 'select',
          	'#title' => t('採購類別'),
            '#weight' => $form['add_item_status_message']['#weight'] + 1,
            '#options' => array('product' => '產品', 'goods' => '零件/物品'),
            '#default_value' => array('product'),
            '#ajax' => array(
				'callback' => 'ajax_merchandise_category',
				'event' => 'change',
			),
            '#prefix' => '<div class="edit-merchandise-category">',
			'#suffix' => '</div>',  
        ];*/

		$form['list_merchandise'] = [
			'#type' => 'entity_autocomplete',
			'#target_type' => 'node',
			'#selection_handler' => 'views',
			'#title' => t('產品/零件/物品編號'),
			'#selection_settings' => [
				'view' => [
					'view_name' => 'product_and_goods_entities_for_view',
					'display_name' => 'entity_reference_1',
					'arguments' => []
				], 
			],
			'#ajax' => [
				'callback' => 'ajax_merchandise_category',
				'event' => 'autocompleteclose change',
			],
			'#weight' => $form['add_item_status_message']['#weight'] + 1,
			'#size' => 23,
			'#prefix' => '<div class="edit-list-merchandise">',
			'#suffix' => '</div>',
		];

		$form['merchandise_name'] = array(
            '#title' => '產品/零件/物品名稱',
            '#type' => 'textfield',
			'#weight' => $form['list_merchandise']['#weight'] + 1,
            '#size' => 23,
			'#disabled' => true,
			'#prefix' => '<div class="edit-merchandise-name">',
			'#suffix' => '</div>',
        );

		$form['quantity'] = array(
            '#title' => '數量',
            '#type' => 'textfield',
			'#ajax' => array(
				'callback' => 'ajax_purchase_order_calculate_price',
				'event' => 'change',
			),
			'#attributes' => array(
				'min' => '0',
                'max' => '100000',
        		' type' => 'number',
    		),
			'#weight' => $form['merchandise_name']['#weight'] + 1,
			'#prefix' => '<div class="add-purchase-item-quantity">',
			'#suffix' => '</div>',
        );

		$form['price'] = array(
            '#title' => '單價',
            '#type' => 'textfield',
			'#ajax' => array(
				'callback' => 'ajax_purchase_order_calculate_price',
				'event' => 'change',
			),
            '#size' => 9,
			'#weight' => $form['quantity']['#weight'] + 1,
			'#prefix' => '<div class="add-purchase-item-price">',
			'#suffix' => '</div>',
        );


		$form['total_amount'] = array(
            '#title' => '金額',
            '#type' => 'textfield',
            '#size' => 8,
			'#weight' => $form['price']['#weight'] + 1,
			'#prefix' => '<div class="add-purchase-item-total-amount">',
			'#suffix' => '</div>',
        );

		$form['create_single_item'] = array(
			'#type' => 'submit',
			'#value' => t('新增'),
			'#weight' => 30,
			'#attributes' => [
				'class' => [
					'use-ajax',
				],
			],
			'#ajax' => [
				'callback' => 'add_purchase_item_callback',
				'event' => 'click',
			],
			'#prefix' => '<div class="add-single-item-into-purchase-button">',
			'#suffix' => '</div>',
        );

		if ( $bill != null && !empty($bill->field_actual_received_payment->value) ) {
			$form['create_single_item']['#disabled'] = true;
		}

		$form['historical_purcase_reocrd'] = array(
				'#prefix' => '<div class="historical-purchase-order">',
				'#suffix' => '</div>',
				'#weight' => 31,
		);

		$form['purchase_item_table'] = array(
              '#title' => t('採購項目管理'),
              '#weight' => 31,
			  '#prefix' => '<div id="purchase-item-table"></div>',
        );

		if ( !$node->isNew() ) {
			$form['delivery_info']['#open'] = false;
			$form['vendor_info']['#open'] = false;
			$form['purchase_item_table']['#prefix'] = items_table_generate($node->id());
		}

		$form['regenerate_table'] = array(
			'#type' => 'submit',
			'#value' => t('整理訂單項目'),
			'#weight' => 31,
			'#attributes' => [
				'class' => [
					'use-ajax',
				],
			],
			'#ajax' => [
				'callback' => 'table_regenerate_callback',
				'event' => 'click',
			],
			'#prefix' => '<div class="to-purchase-item-list">',
			'#suffix' => '</div>',
        );

		if ( !$node->isNew() ) {
			$form['to_purchase_item_list'] = array(
				'#prefix' => '<div class="to-purchase-item-list"><a href="/admin/purchase-items?order_id=' . $node->title->value .'" target="_blank">連結到此採購項目列表</a>',
				'#suffix' => '</div>',
				'#weight' => 32,
			);
		}

		$form['comment_section'] = [
			'#group' => 'advanced',
			'#type' => 'details',
			'#title' => t('額外選項'),
			'#attributes' => [
				'class' => ['node-form-options']
			],
			'#attached' => [
				'library' => ['node/drupal.node'],
			],
			'#optional' => true,
			'#open' => true,
		];
		$form['field_rich_comment']['#group'] = 'comment_section';

		$form['moderation_state']['widget'][0]['state']['#description'] = " ";
		$form['moderation_state']['widget'][0]['state']['#ajax'] = [
			'callback' => 'ajax_purchase_order_status_changed_validation',
			'event' => 'change',
			'wrapper' => 'ajax-change',
		];
	}
}

function generate_purchase_bill_callback(array $form, FormStateInterface $form_state) {
	$response = new AjaxResponse();
	$entity = $form_state->getFormObject()->getEntity();
	$entity = \Drupal\node\Entity\Node::load($entity->id());
	if ( !empty($entity->id()) ) {
		$query = \Drupal::entityQuery("node")
                    					->condition('type', 'bill_4_purchase')
										->condition('field_order_id', $entity->id())
                    					->execute();
		if ( count($query) == 0 ) {
			$bill = \Drupal\node\Entity\Node::create(['type' => "bill_4_purchase",]);
			$bill->field_order_id->target_id = $entity->id();
			$bill->field_vendor_entity->target_id = $entity->field_vendor_entity->target_id;
			$bill->save();
			$connection = \Drupal::database();
			$connection->insert('node__field_bill_purchase')->fields([
															'bundle' => $entity->bundle(),
															'entity_id' => $entity->id(),
															'revision_id' => $entity->vid->value,
															'langcode' => 'en',
															'delta' => 1,
															'field_bill_purchase_target_id' => $bill->nid->value])->execute();
			$connection->insert('node_revision__field_bill_purchase')->fields([
															'bundle' => $entity->bundle(),
															'entity_id' => $entity->id(),
															'revision_id' => $entity->vid->value,
															'langcode' => 'en',
															'delta' => 1,
															'field_bill_purchase_target_id' => $bill->nid->value])->execute();
			\Drupal::service('cache.entity')->invalidateAll();
			\Drupal::service('cache.data')->invalidateAll();
			\Drupal::service('cache.render')->invalidateAll();
			$response->addCommand(new HtmlCommand('.total-amount-with-tax', t('含稅總價  $') . $bill->field_total_amount_with_tax->value));
			$response->addCommand(new HtmlCommand('.deposite', t('-訂金  $') . number_format($bill->field_deposit->value)));
			$response->addCommand(new HtmlCommand('.remain-amount', t('=剩餘末支付總價  $') . ($bill->field_remain_unpaid_amount->value - $bill->field_deposit->value)));
			$response->addCommand(new HtmlCommand('.purchase-bill-link', '<a target="_blank" href="/node/' . $bill->id() . '/edit">帳單己建立, 連接到帳單</a>'));
			$response->addCommand(new RemoveCommand('.purchase-generate-bill'));
		}
	}
	
	return $response;
}

function ajax_purchase_order_status_changed_validation(array $form, FormStateInterface $form_state) {
	$ajax_response = new AjaxResponse();
	$node = $form_state->getFormObject()->getEntity();
	$selected_key = $form_state->getValue(moderation_state)[0]['value'];
	$selected_value = PURCHASE_MODERATION_STATE_LABEL[$selected_key];

	$message = '<div></div>';
	if ( $selected_key == 'purchase_rate' || $selected_key == 'purchase_import' ) {
		if ( num_of_purchase_items($node->id()) == 0 ) {
			$message = '<div><font color="red">此採購單沒有任何採購項目, 無法選擇' . $selected_value . '選項</font></div>';
			$ajax_response->addCommand(new HtmlCommand('#edit-moderation-state-0-state--description', $message));
			$ajax_response->addCommand(new InvokeCommand('#edit-moderation-state-0-state', 'val', [$node->moderation_state->value]));
			return $ajax_response;
		}
	} else if ( $selected_key == 'materials_inbound' || $selected_key == 'purchase_done' ) {
		if ( $selected_key == 'materials_inbound' ) {
			$purchase_items_tids = array();
			$field_materials = $node->get('field_material')->getValue();
			for ($i=0; $i < count($field_materials); $i++) {
				$purchase_items_tids[] = $field_materials[$i]['target_id'];
			}
			foreach($purchase_items_tids as $purchase_items_tid) {
				$purchase_item = \Drupal\taxonomy\Entity\Term::load($purchase_items_tid);
				if ( empty($purchase_item->field_purchase_requisition_statu->value) ) {
					$message = '<div><font color="red">此採購單還有一或多個採購項目還入倉庫, 無法選擇' . $selected_value . '選項</font></div>';
					$ajax_response->addCommand(new HtmlCommand('#edit-moderation-state-0-state--description', $message));
					$ajax_response->addCommand(new InvokeCommand('#edit-moderation-state-0-state', 'val', [$node->moderation_state->value]));
					break;
				}
			}
			return $ajax_response;
		}
		if ( $selected_key == 'purchase_done' ) {
			$current_user = \Drupal::currentUser();
			$roles = $current_user->getRoles();
			if ( !in_array('manager', $roles) ) {
				$message = '<div><font color="red">你沒有足夠的權限選擇' . $selected_value . '選項</font></div>';
				$ajax_response->addCommand(new HtmlCommand('#edit-moderation-state-0-state--description', $message));
				$ajax_response->addCommand(new InvokeCommand('#edit-moderation-state-0-state', 'val', [$node->moderation_state->value]));	
				return $ajax_response;
			}
		}		
	}
	return $ajax_response;
}

function ajax_vendor_info_loading(array $form, FormStateInterface $form_state) {
        $ajax_response = new AjaxResponse();
        $vendor_nid = $form_state->getValue('field_vendor_entity')[0]['target_id'];
        $vendor = \Drupal\node\Entity\Node::load($vendor_nid);
        $ajax_response->addCommand(new InvokeCommand('#edit-vendor-title', 'val', [$vendor->field_vendor_name->value]));
        $ajax_response->addCommand(new InvokeCommand('#edit-vendor-contact-window', 'val', [$vendor->field_contact_person->value]));
		$ajax_response->addCommand(new InvokeCommand('#edit-vendor-cell', 'val', [$vendor->field_mobile->value]));
        return $ajax_response;
}

function ajax_merchandise_category(array $form, FormStateInterface $form_state) {
    $ajax_response = new AjaxResponse();
    $node_nid = $form_state->getValue('list_merchandise');

    $connection = \Drupal::database();
    $query = $connection->query("SELECT type FROM {node_field_data} Where 
                                                        nid = :nid", [':nid' => $node_nid])->fetchAll();
    $merchandise_category = $query[0]->type;
    $entity = \Drupal\node\Entity\Node::load($node_nid);

    if ( $merchandise_category == "product" ) {
        $merchandise_category = "產品";
        $title = $entity->field_product_name->value;
    } else if ( $merchandise_category == "goods" ) {
        $merchandise_category = "零件/物品";
        $title = $entity->field_goods_name->value;
    }
	$price = $entity->field_cost_price->value;

    $ajax_response->addCommand(new InvokeCommand('#edit-merchandise-name', 'val', [$title]));
	$ajax_response->addCommand(new InvokeCommand('#edit-price', 'val', [$price]));
	$ajax_response->addCommand(new InvokeCommand('#edit-total-amount', 'val', [""]));
	$ajax_response->addCommand(new InvokeCommand('#edit-quantity', 'val', [""]));
    $ajax_response->addCommand(new InvokeCommand('#edit-merchandise-category', 'val', [$merchandise_category]));

	$url = "/admin/purchase-items?field_goods_name_value=$title";
	$hyperlink = '<a target="_blank" href=' . $url . '>此項採購歷史紀錄</a>';
	$ajax_response->addCommand(new HtmlCommand('.historical-purchase-order', $hyperlink));
    
	return $ajax_response;
}

function ajax_purchase_order_calculate_price(array $form, FormStateInterface $form_state) {
    $ajax_response = new AjaxResponse();
    $quantity = $form_state->getValue('quantity');
    $price = $form_state->getValue('price');
    $total = 0;

    if ( !empty($quantity) && !empty($price) ) {    
        $total = $quantity * $price;
    }
    $ajax_response->addCommand(new InvokeCommand('#edit-total-amount', 'val', [$total]));
    
    return $ajax_response;
}

function add_purchase_item_callback(array $form, FormStateInterface $form_state) {
    $response = new AjaxResponse();
	$status = "";
	$entity = $form_state->getFormObject()->getEntity();
	if ( !empty($entity->id()) ) {
		if ( empty($form_state->getValue('list_merchandise')) || empty($form_state->getValue('quantity')) ) {
			$status = '<font color="red">產品/零件/物品編號和數量必填!</font>';	
		} else {
			$item_id = gen_purchase_item_id($entity->title->value);
			$item = \Drupal\taxonomy\Entity\Term::create(['vid' => 'purchase_items']);
			$item->set('name', $item_id);
			$item->field_order_id->target_id = $entity->id();
			$item->set('field_product_goods', $form_state->getValue('list_merchandise'));
			$item->set('field_quantity', $form_state->getValue('quantity'));
			$item->set('field_price', $form_state->getValue('price'));
			$item->set('field_total_amount', $form_state->getValue('total_amount'));
			$item->set('status', false);
			$item->save();
			$connection = \Drupal::database();
			$obj = $connection->query("SELECT entity_id, MAX(delta) as num FROM {node__field_material} Where 
															entity_id = :nid", [':nid' => $entity->id()])->fetchAll();
			$num = 0;
			if ( !empty($obj[0]->entity_id) ) {
				$num = $obj[0]->num + 1;
			}
			$vid = $vid = \Drupal::entityTypeManager()->getStorage('node')->getLatestRevisionId($entity->id());
			$connection->insert('node__field_material')->fields([
																'bundle' => $entity->bundle(),
																'entity_id' => $entity->id(),
																'revision_id' => $vid,
																'langcode' => 'en',
																'delta' => $num,
																'field_material_target_id' => $item->id()])->execute();
		
			$connection->insert('node_revision__field_material')->fields([
																	'bundle' => $entity->bundle(),
																	'entity_id' => $entity->id(),
																	'revision_id' => $vid,
																	'langcode' => 'en',
																	'delta' => $num,
																	'field_material_target_id' => $item->id()])->execute();
			\Drupal::service('cache.entity')->invalidateAll();
			\Drupal::service('cache.data')->invalidateAll();
			\Drupal::service('cache.render')->invalidateAll();

			$status = '<font color="blue">新增成功!</font>';

			$table = items_table_generate($entity->id());
			$response->addCommand(new HtmlCommand('#purchase-item-table', $table));
		}
	} else {
		$status = '<font color="red">此採購單還不在資料庫, 請先儲存建立此採購單!</font>';
	}

	$response->addCommand(new HtmlCommand('.historical-purchase-order', ""));
	$response->addCommand(new HtmlCommand('.add-purchase-item-status-message', $status));
	$response->addCommand(new InvokeCommand('#edit-list-merchandise', 'val', [""]));
	$response->addCommand(new InvokeCommand('#edit-merchandise-name', 'val', [""]));
	$response->addCommand(new InvokeCommand('#edit-merchandise-category', 'val', [""]));
	$response->addCommand(new InvokeCommand('#edit-quantity', 'val', [""]));
	$response->addCommand(new InvokeCommand('#edit-price', 'val', [""]));
	$response->addCommand(new InvokeCommand('#edit-total-amount', 'val', [""]));
    return $response;
}

function items_table_generate($order_id) {
	$tids = \Drupal::entityQuery("taxonomy_term")->condition("vid", "purchase_items")
				->condition('field_order_id', $order_id)
				->execute();
	$table = "";
	if ( count($tids) == 0 ) {
		$table = '<div id="purchase-item-table"></div>';
		return $table;
	}

	$table = '<div id="purchase-item-table"><table>-BODY-</table></div>';
	$table_head = "<thead><tr><td>採購項目編號</td><td>產品/零件/物品編號</td><td>產品/零件/物品名稱</td><td>採購類別</td><td>數量</td><td>單價</td><td>金額</td><td></td></tr></thead>";
	$table_body_begin = '<tbody>';
	$table_body = '';
	$total_quantity = 0;
	$sum = 0;
	$total_cost = 0;
	$is_closed = false;
	$node = \Drupal\node\Entity\Node::load($order_id);
	if ( !empty($node->field_bill_purchase->target_id) ) {
		$bill = \Drupal\node\Entity\Node::load($node->field_bill_purchase->target_id);
		if ( !empty($bill->field_actual_received_payment->value) ) {
			$is_closed = true;
		}
	}

	foreach($tids as $tid) {
		$item = \Drupal\taxonomy\Entity\Term::load($tid);
		$product_or_goods = \Drupal\node\Entity\Node::load($item->field_product_goods->target_id);
        if ( $product_or_goods->bundle() == "goods" ) {
            $category = "零件/物件";
            $name = $product_or_goods->field_goods_name->value;
        } else {
            $category = "產品";
            $name = $product_or_goods->field_product_name->value;
        }

		$dropdown_button = "";
		if ( !$is_closed ) {
			$dropdown_button = '<div class="dropbutton-wrapper dropbutton-multiple">
					<div class="dropbutton-widget">
						<ul class="dropbutton">
							<li class="edit dropbutton-action">
								<a href="/taxonomy/term/' . $tid .'/edit?destination=/node/' . $order_id .'/edit" hreflang="en">Edit</a>
							</li>
							<li class="dropbutton-toggle">
								<button type="button">
									<span class="dropbutton-arrow">
										<span class="visually-hidden">List additional actions</span>
									</span>
								</button>
							</li>
							<li class="delete dropbutton-action secondary-action">
								<a href="/taxonomy/term/' . $tid .'/delete?destination=/node/' . $order_id .'/edit" hreflang="en">Delete</a>
							</li>
						</ul>
					</div>
				</div>';
		}
		$table_body .= '<tr><td>' . $item->name->value . '</td><td>' . $product_or_goods->title->value . '</td><td>' . $name . '</td><td>' . $category . '</td><td>' . number_format($item->field_quantity->value) . '</td><td>' . number_format($item->field_price->value) . '</td><td>' . number_format($item->field_total_amount->value) . '</td><td>' . $dropdown_button . '</td></tr>';
		$total_quantity = $total_quantity + $item->field_quantity->value;
		$sum = $sum + $item->field_price->value;
		$total_cost = $total_cost + $item->field_total_amount->value;
	}
	$table_body .= '<tr><td><strong>總合</strong></td><td></td><td></td><td></td><td><strong>' . number_format($total_quantity) . '</strong></td><td><strong>$' . number_format($sum) . '</strong></td><td><strong>$' . number_format($total_cost) . '</strong></td><td></td></tr>';
	$table_body_end = '</tbody>';

	$table_body = $table_head . $table_body_begin . $table_body . $table_body_end;
	$table = str_replace('-BODY-', $table_body, $table);
	
	return $table;
}

function num_of_purchase_items($nid) {
	$purchase_items_tids = \Drupal::entityQuery("taxonomy_term")
									->condition('vid', 'purchase_items')
									->condition('field_order_id', $nid)->execute();
	return count($purchase_items_tids);
}

function purchase_order_table_generator_in_view($node) {
	$vendor_nid = $node->field_vendor_entity->target_id;
	$vendor = \Drupal\node\Entity\Node::load($vendor_nid);
	/***************table head***************/ 
	{
		$table_start = '<table id="purchase-oder-table-header"><tbody>';
		$table_body = '<tr id="purchase-oder-table-header-tpy-name"><td colspan="4" align="center"><strong>' . \Drupal::config('common_utils.settings')->get('company') .'</strong></td></tr>';
		$table_body .= '<tr id="purchase-oder-table-header-tpy-add"><td colspan="4" align="center">' . \Drupal::config('common_utils.settings')->get('company_address') .'</td></tr>';
		$table_body .= '<tr id="purchase-oder-table-header-tpy-phone"><td colspan="4" align="center">Tel: ' . \Drupal::config('common_utils.settings')->get('company_phone') . '  Fax: ' . \Drupal::config('common_utils.settings')->get('company_fax') . '</td></tr>';
		$status = "";
		if ( $node->moderation_state->value == 'purchase_rate' ) {
			$status = "採購詢價單";
		} else {
			$status = "採購單";
		}
		
		$table_body .= '<tr id="purchase-oder-table-header-status"><td colspan="4" align="center"><strong><u>' . $status .'</u></strong></td></tr>';
		$table_body .= '<tr id="purchase-oder-table-header-sell-info"><td colspan="3" align="left">報價日期: ' . date('Y/m/d') .'</td><td align="left" width="200px">有效日期: </td></tr>';	
		$table_body .= '<tr id="purchase-oder-table-header-sell-info"><td colspan="3" align="left">廠商名稱: <a href="/node/' . $vendor_nid .'/edit" target="blank">' . $vendor->field_vendor_name->value . '</a></td><td align="left" width="200px">報價憑證: ' . $node->title->value . '</td></tr>'; 
		$table_body .= '<tr id="purchase-oder-table-header-sell-info"><td colspan="3" align="left">公司地址: ' . $vendor->field_address->value . '</td><td align="left" width="200px">聯絡人: ' . $vendor->field_contact_person->value . '</td></tr>'; 
		if ( !empty($node->field_shipping_address->value) ) {
			$table_body .= '<tr id="purchase-oder-table-header-sell-info"><td colspan="4" align="left">發貨地址: ' . $node->field_shipping_address->value . '</td></tr>'; 
		}
		$table_body .= '<tr id="purchase-oder-table-header-sell-info"><td align="left">電話: ' . $vendor->field_phone->value . '</td><td align="left">連絡人電話: ' . $vendor->field_mobile->value . '</td><td>傳真: ' . $vendor->field_fax->value . '</td><td align="left" width="200px">統一編號: ' . $vendor->field_uniform_number->value . '</td></tr>'; 
		$table_end = "</tbody></table>";
		$table_head = $table_start . $table_body . $table_end;
	}
	
	/***************table list***************/
	{
		$table_list = "";
		$total_discount = 0;
		$table_start = '<table id="purchase-oder-table-list"><tbody>';
		$table_body = '<tr><th width="50px">欄號</th><th>項目型號</th><th>項目名稱</th><th width="75px">採購數量</th><th width="50px">單位</th><th width="85px">金額</th></tr>';
		$tids = \Drupal::entityQuery("taxonomy_term")->condition("vid", "purchase_items")
					->condition('field_order_id', $node->id())
					->execute();
		$index = 0;
		foreach($tids as $tid) {
			$item = \Drupal\taxonomy\Entity\Term::load($tid);
			if ( $item->field_quantity->value > 0 ) {
				$product = \Drupal\node\Entity\Node::load($item->field_product_goods->target_id);
				$index++;
				$table_body .= '<tr><td>' . $index . '</td><td><a href="/taxonomy/term/' .$tid . '/edit" target="blank">' . $product->title->value . '</a></td><td>' . $product->field_goods_name->value . 
								'</td><td align="right">' . number_format($item->field_quantity->value) . 
								'</td><td align="right">' . $product->field_unit->value .
								'</td><td  align="right">' . number_format($item->field_total_amount->value) . 
								'</td></tr>';
				if ( !empty($item->field_comments->value) ) {
					$table_body .= '<tr><td colspan="7" align="left">加註: ' . $item->field_comments->value . '</td></tr>';
				}
			}
		}
		$table_body .= '<tr class="purchase-oder-table-list-bottom"><td colspan="7" align="center"> (以下空白) </td></tr>'; 
		$table_end = "</tbody></table>"; 
		$table_list = $table_start . $table_body . $table_end;
	}
	
	/***************table footer***************/
	{
		$table_footer = "";
		$bill = \Drupal\node\Entity\Node::load($node->field_bill_purchase->target_id);
		$table_start = '<table id="purchase-oder-table-footer"><tbody>';
		$table_body = '<tr><td align="left" width="110px">應收總金額: </td><td align="right" width="110px">' . number_format($bill->field_total_amount_with_tax->value) . 
						'</td><td align="left" width="110px">已收金額: </td><td align="right" width="110px">' . number_format($bill->field_deposit->value + $bill->field_write_off_amount->value)  . 
						'</td><td align="left" width="110px">未收金額: </td><td align="right" width="110px">' . number_format($bill->field_remain_unpaid_amount->value) .
						'</td></tr>';
		$table_body .= '<tr><td align="left" width="110px">物流:</td><td align="right">' . get_entity_storage_label($node, 'field_logistics', $node->field_logistics->value) . 
						'</td><td align="left" width="110px"></td><td align="right">' .
						'</td><td align="left" width="110px"></cd td><td align="right">' . '</td></tr>';
		$table_end = "</tbody></table>";
		$table_footer = $table_start . $table_body . $table_end;
	}
	
	return $table_head . $table_list . $table_footer;
}

/*function ajax_vendor_order_status_changed_validation(array $form, FormStateInterface $form_state) {
    $ajax_response = new AjaxResponse();
	$node = $form_state->getFormObject()->getEntity();
	$selected_key = $form_state->getValue(field_purchase_status)[0]['value'];
	$selected_value = get_entity_storage_label($node, 'field_purchase_status', $selected_key);

	$message = '<div class="purchase-order-status-message"></div>';
	$ajax_response->addCommand(new HtmlCommand('.purchase-order-status-message', $message));
	if ( $selected_key == 'receive' || $selected_key == 'done' ) {
		if ( $node->isNew() ) {
			$message = '<div class="purchase-order-status-message"><font color="red">此新採購單還未被建立及儲存, 無法選擇' . $selected_value . '選項</font></div>';
			$ajax_response->addCommand(new HtmlCommand('.purchase-order-status-message', $message));
			$ajax_response->addCommand(new InvokeCommand('#edit-field-purchase-status', 'val', [$node->field_purchase_status->value]));
		} else {
			$purchase_items_tids = \Drupal::entityQuery("taxonomy_term")
											->condition('vid', 'purchase_items')
											->condition('field_order_id', $node->id())
											->execute();
			if ( count($purchase_items_tids) == 0 ) {
				$message = '<div class="purchase-order-status-message"><font color="red">此採購單沒有任何採購項目, 無法選擇' . $selected_value . '選項</font></div>';
				$ajax_response->addCommand(new HtmlCommand('.purchase-order-status-message', $message));
				$ajax_response->addCommand(new InvokeCommand('#edit-field-purchase-status', 'val', [$node->field_purchase_status->value]));
			} else {
				foreach($purchase_items_tids as $purchase_items_tid) {
					$purchase_item = \Drupal\taxonomy\Entity\Term::load($purchase_items_tid);
					if ( $purchase_item->field_has_inventoried_->value == false ) {
						$message = '<div class="purchase-order-status-message"><font color="red">此採購單還有一或多個採購項目還沒入庫, 無法選擇' . $selected_value . '選項</font></div>';
						$ajax_response->addCommand(new HtmlCommand('.purchase-order-status-message', $message));
						$ajax_response->addCommand(new InvokeCommand('#edit-field-purchase-status', 'val', [$node->field_purchase_status->value]));
						break;
					}
				}
			}
		}	
	}
	
	return $ajax_response;
}*/





