<?php
use \Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\InvokeCommand;
use Drupal\Core\Ajax\CssCommand;
use Drupal\Core\Url;

/**
 * Implements hook_entity_operation().
 * @ignore
 */
/*function sell_items_entity_operation(\Drupal\Core\Entity\EntityInterface $entity) {
    $operations = [];
    if ( $entity->getEntityTypeId() == 'taxonomy_term' && $entity->bundle() === 'sell_items' ) {
        $roles = \Drupal::currentUser()->getRoles();
        $operations['has_packed'] = [
                'title' => t('包裝出貨'),
                'weight' => '100',
                'url' => Url::fromRoute('sell_items.has_packed',  ['taxonomy_term' => $entity->id()]),
        ];
    }
  return $operations;
}*/

/**
 * Implements hook_page_preprocess_html().
 * @ignore
 */
function sell_items_preprocess_html(&$variables) {
    //Add JS and CSS library
    $variables['#attached']['library'][] = 'sell_items/sell_items';
}

/**
 * @ignore
 */
function sell_items_taxonomy_term_presave($term) {
	if ( $term->bundle() == "sell_items" ) {
        $term->status->value = false; 
        if ( empty($term->field_order_id->target_id) ) {
            $term->set('name', gen_sell_item_id());
        }

        $client_warehouse = $term->field_client_warehouse->value;
        if ( ($term->field_requisition_status->value == "transferred") && !empty($client_warehouse) && 
                (get_storage_nid_by_title($client_warehouse) == -1) ) {
            $sale_form = \Drupal\node\Entity\Node::load($term->field_order_id->target_id);
            $customer = \Drupal\node\Entity\Node::load($sale_form->field_customer_entity->target_id);
            $warehouse = \Drupal\node\Entity\Node::create(['type' => 'storage',]);
            $warehouse->set('title', $client_warehouse);
            $warehouse->set('field_storage_name', $customer->field_customer_title->value);
            $warehouse->save();
        }

        $original_term = $term->original;

        //1. history status 沒有, current status 沒有
        //2. history status 沒有, current status 有
        //3. history status 有， current status 沒有
        //4. history status 有， current status 有
        if ( empty($original_term->field_requisition_status->value) && empty($term->field_requisition_status->value) ) {
        } else if ( empty($original_term->field_requisition_status->value) && !empty($term->field_requisition_status->value) ) {
            update_inventory($term);
        } else if ( !empty($original_term->field_requisition_status->value) && empty($term->field_requisition_status->value) ) {
            revert_inventory($original_term);
        } else if ( !empty($original_term->field_requisition_status->value) && !empty($term->field_requisition_status->value)  ){
            revert_inventory($original_term);
            update_inventory($term);
        }
	}
}

/**
 * @ignore
 */
function sell_items_taxonomy_term_insert($term) {
    if ($term->bundle() === "sell_items") {
        $sell_form = \Drupal\node\Entity\Node::load($term->field_order_id->target_id);
        if ( !empty($sell_form->field_bill->target_id) ) {
            $bill = \Drupal\node\Entity\Node::load($sell_form->field_bill->target_id);
            $bill->save();
        }
    }
}

/**
 * @ignore
 */
function sell_items_taxonomy_term_update($term) {
    if ($term->bundle() === "sell_items") {
        $sell_form = \Drupal\node\Entity\Node::load($term->field_order_id->target_id);
        if ( !empty($sell_form->field_bill->target_id) ) {
            $bill = \Drupal\node\Entity\Node::load($sell_form->field_bill->target_id);
            $bill->save();
        }
    }
}

/**
 * @ignore
 */
function sell_items_taxonomy_term_delete($term) {
    if ($term->bundle() === "sell_items") {
        if ( !empty($term->field_requisition_status->value) ) {
            revert_inventory($term);
        }
        \Drupal::messenger()->addMessage($term->name->value . "成功刪除.", "status");

        //remove from 銷售單
        $order_nid = $term->field_order_id->target_id;
        $order = \Drupal\node\Entity\Node::load($order_nid);
        $order_vid = $order->vid->value;

        $connection = \Drupal::database();
        $connection->delete('node__field_sell_products')
                            ->condition("entity_id", $order_nid)
                            ->condition("revision_id", $order_vid)
                            ->condition("field_sell_products_target_id", $term->id())
                            ->execute();
        $connection->delete('node_revision__field_sell_products')
                            ->condition("entity_id", $order_nid)
                            ->condition("revision_id", $order_vid)
                            ->condition("field_sell_products_target_id", $term->id())
                            ->execute();
        \Drupal::service('cache.entity')->invalidateAll();
        \Drupal::service('cache.data')->invalidateAll();
        \Drupal::service('cache.render')->invalidateAll();
    }
}

/**
 * @ignore
 */
function sell_items_menu_local_tasks_alter(&$data, $route_name) {
    unset($data['tabs'][0]["entity.taxonomy_term.delete_form"]);
}

/**
 * @ignore
 */
function sell_items_form_alter(&$form, FormStateInterface &$form_state, $form_id) {
    if ($form_id === 'taxonomy_term_sell_items_form' ) {
        $term = $form_state->getFormObject()->getEntity();
        if ( $term->isNew() ) {
            $form ['name']['widget'][0]['value']['#default_value'] = gen_sell_item_id();
        }
        $form ['field_sell_type']['#disabled'] = true;
        $form ['name']['widget'][0]['value']['#disabled'] = true;
        $form ['field_order_id']['#disabled'] = true;
        $form ['field_product_id']['#disabled'] = true;


        $form['field_requisition_status']['widget']['#ajax'] = [
			'callback' => 'ajax_requisition_status_changed',
			'event' => 'change',
		];

        $current_user = \Drupal::currentUser();
		$roles = $current_user->getRoles();
        if ( !empty($term->field_requisition_status->value) && !in_array('manager', $roles) ) {
            $form['actions']['submit']['#disabled'] = true;
            $form['actions']["delete"]['#attributes']['style'] = 'display: none;';
        }

        $form['field_order_id']['widget'][0]['target_id']['#ajax'] = array(
                'callback' => 'ajax_order_id_was_input',
                'wrapper' => 'ajax-wrapper',
                'event' => 'autocompleteclose change',
        );

        $form['field_product_id']['widget'][0]['target_id']['#ajax'] = array(
                'callback' => 'ajax_sell_items_product_loading',
                'wrapper' => 'ajax-wrapper',
                'event' => 'autocompleteclose change',
        );

        $form['field_quantity']['widget'][0]['value']['#ajax'] = array(
            'callback' => 'ajax_sell_items_calculate_price',
			'event' => 'change',
        );
        $form['field_quantity']['widget'][0]['value']['#attributes'] = array(
            'min' => '0',
        );
        $form['field_discount']['widget'][0]['value']['#ajax'] = array(
            'callback' => 'ajax_sell_items_calculate_price',
			'event' => 'change',
        );

        if ( !empty($term->field_order_id->target_id) ) {
            $node = \Drupal\node\Entity\Node::load($term->field_order_id->target_id);
            if ( !empty($node->field_bill->target_id) ) {
                $bill = \Drupal\node\Entity\Node::load($node->field_bill->target_id);
                if ( !empty($bill->field_actual_received_payment->value) ) {
                    $form['actions']['submit']['#disabled'] = true;
                    $form['actions']["delete"]['#attributes']['style'] = 'display: none;';
                }
            }
        }

        $form ['field_gross_profit_margin']['#access'] = view_gross_profit_margin();
        //$form['#validate'][] = 'sell_items_form_validate';
    } else if ( $form_id === 'taxonomy_term_sell_items_delete_form' ) {
        $term = $form_state->getFormObject()->getEntity();
        if ( !empty($term->field_order_id->target_id) ) {
            $node = \Drupal\node\Entity\Node::load($term->field_order_id->target_id);
            if ( !empty($node->field_bill->target_id) ) {
                $bill = \Drupal\node\Entity\Node::load($node->field_bill->target_id);
                if ( !empty($bill->field_actual_received_payment->value) ) {
                    $form['actions']['submit']['#disabled'] = true;
                }
            }
        }
    }
}

/**
 * @ignore
 */
function sell_items_form_validate($form, &$form_state) {
    //if ( $form_state->getValue('field_requisition_status')[0]['value'] == "transferred" && empty($form_state->getValue('field_temporary_storage')) ) {
    if ( $form_state->getValue('field_requisition_status')[0]['value'] == "transferred" && empty($form_state->getValue('field_client_warehouse')[0]['value']) ) {
        $form_state->setError($form , t('無法儲存, 寄存倉庫沒選.'));
    }
}

/**
 * @ignore
 */
function ajax_requisition_status_changed(array $form, FormStateInterface $form_state) {
    $ajax_response = new AjaxResponse();
    $customer_title = "";
    if ( $form_state->getValue('field_requisition_status')[0]['value'] == "transferred" ) {
        $term = $form_state->getFormObject()->getEntity();
        $order = \Drupal\node\Entity\Node::load($term->field_order_id->target_id);
        $customer = \Drupal\node\Entity\Node::load($order->field_customer_entity->target_id);
        $customer_title = $customer->title->value;
        $ajax_response->addCommand(new InvokeCommand('#edit-field-client-warehouse-0-value', 'val', [$customer_title]));
    } else {
        $ajax_response->addCommand(new InvokeCommand('#edit-field-client-warehouse-0-value', 'val', [$customer_title]));
    }
    
    return $ajax_response;
}

/**
 * @ignore
 */
function ajax_sell_items_calculate_price(array $form, FormStateInterface $form_state) {
	$ajax_response = new AjaxResponse();
	$quantity = (int)$form_state->getValue('field_quantity')[0]['value'];
	$price = (int)$form_state->getValue('field_price')[0]['value'];
	$discount = (double)$form_state->getValue('field_discount')[0]['value'];
	$total_amount = 0;
	if ( empty($discount) || $discount <= 0 ) {
		$tota_amount = $quantity*$price;
	} else {
		$discount = $discount/100;
		$discount_price = $price - ($price*$discount);
		$tota_amount = $discount_price*$quantity;
	}

	$ajax_response->addCommand(new InvokeCommand('#edit-field-total-amount-0-value', 'val', [$tota_amount]));

	return $ajax_response;
}

/**
 * @ignore
 */
function ajax_order_id_was_input(array $form, FormStateInterface $form_state) {
        $ajax_response = new AjaxResponse();
        $order_id = $form_state->getValue('field_order_id')[0]['target_id'];
        $order = \Drupal\node\Entity\Node::load($order_id);
        $order_number = $order->title->value;

        $ajax_response->addCommand(new InvokeCommand('#edit-name-0-value', 'val', [gen_sell_item_id($order_number)]));
        return $ajax_response;
}

/**
 * @ignore
 */
function ajax_sell_items_product_loading(array $form, FormStateInterface $form_state) {
        $ajax_response = new AjaxResponse();
        $product_id = $form_state->getValue('field_product_id')[0]['target_id'];
        $product = \Drupal\node\Entity\Node::load($product_id);
        
        $ajax_response->addCommand(new InvokeCommand('#edit-field-quantity-0-value', 'attr', ['max', $product->field_stock->value]));
        $ajax_response->addCommand(new InvokeCommand('#edit-field-quantity-0-value', 'val', [0]));
        $ajax_response->addCommand(new InvokeCommand('#edit-field-price-0-value', 'val', [$product->field_retail_price->value]));
        return $ajax_response;
}

/**
 * generate unique id for sell item form.
 * 
 * @param int $order_id - sale order unique id
 * @return string - uniqud id for sell item form
 */
function gen_sell_item_id($order_id = null) {
    $total = \Drupal::entityQuery("taxonomy_term")
                    ->condition("vid", "sell_items")
                    ->execute();
    if ( $order_id == null ) {
        return "P-" . date("md") . "-" . (count($total) + 1);
    } else {
        $replace = substr($order_id, 0, 7);
        return str_replace($replace, "P-", $order_id) . "-" . (count($total)+1);
    }
}

/**
 * revert the inventory for sell item.
 *
 * @param term $original - taxonomy term sell item
 * @return void
 */
function revert_inventory($original) {
    $inventory_nids = \Drupal::entityQuery("node")
                                        ->condition('type', 'stock_up')
                                        ->condition('field_product_goods', $original->field_product_id->target_id)
                                        ->condition('field_storage_id', $original->field_storage->target_id)
                                        ->execute();
    foreach($inventory_nids as $inventory_nid) {
        $material = \Drupal\node\Entity\Node::load($inventory_nid);
        if ( $original->field_requisition_status->value == "returned_to_inventory" ) {
            $before_quantity = $material->field_stock->value;
            $after_quantity = $before_quantity - $original->field_quantity->value;
            $material->set('field_stock', $after_quantity);
            $message = get_product_name_by_nid($original->field_product_id->target_id) . "退倉取消, 從倉庫移除成功. 儲存在 " . get_storage_name_by_nid($original->field_storage->target_id) . " 的庫存數量 " . $after_quantity; 
            create_warehouse_transaction_log($original->field_product_id->target_id, $original->field_storage->target_id, "", "return", $original->field_quantity->value, $before_quantity, $after_quantity, get_sell_order_number_by_nid($original->field_order_id->target_id), "");
        } else {
            $before_quantity = $material->field_stock->value;
            $after_quantity = $material->field_stock->value + $original->field_quantity->value;
            $material->set('field_stock', $after_quantity);
            create_warehouse_transaction_log($original->field_product_id->target_id, "", $original->field_storage->target_id, "inbound", $original->field_quantity->value, $before_quantity, $after_quantity, get_sell_order_number_by_nid($original->field_order_id->target_id), "");
            $message = get_product_name_by_nid($original->field_product_id->target_id) . "退回倉庫成功 儲存在 " . get_storage_name_by_nid($original->field_storage->target_id) . " 的庫存數量 " . $after_quantity;             
        }
        \Drupal::messenger()->addMessage($message);
        $material->save();
        break;
    }
    
    if ( $original->field_requisition_status->value == "transferred" ) {
        $inventory_nids = \Drupal::entityQuery("node")
                                        ->condition('type', 'stock_up')
                                        ->condition('field_product_goods', $original->field_product_id->target_id)
                                        //->condition('field_storage_id', $original->field_temporary_storage->target_id)
                                        ->condition('field_storage_id', get_storage_nid_by_title($original->field_client_warehouse->value))
                                        ->execute();
        foreach($inventory_nids as $inventory_nid) {
            $temp_inventory = \Drupal\node\Entity\Node::load($inventory_nid);
            $before_quantity = $temp_inventory->field_stock->value;
            $after_quantity =  $before_quantity - $original->field_quantity->value;
            $temp_inventory->set('field_stock', $after_quantity);
            $temp_inventory->save();
            create_warehouse_transaction_log($original->field_product_id->target_id, $original->field_storage->target_id, "", "transfer", $original->field_quantity->value, $before_quantity, $after_quantity, get_sell_order_number_by_nid($original->field_order_id->target_id), "");
            //$message = get_product_name_by_nid($original->field_product_id->target_id) . " 寄存在 " . get_storage_name_by_nid($original->field_temporary_storage->target_id) . "退回原倉庫, 剩餘數量 " . $after_quantity; 
            $message = get_product_name_by_nid($original->field_product_id->target_id) . " 寄存在 " . $original->field_client_warehouse->value . "退回原倉庫, 剩餘數量 " . $after_quantity; 
            \Drupal::messenger()->addMessage($message);
            break;
        }
    }
}

/**
 * update the inventory for sell item.
 *
 * @param term $term - taxonomy term sell item
 * @return void
 */
function update_inventory($term) {
    $inventory_nids = \Drupal::entityQuery("node")
                                        ->condition('type', 'stock_up')
                                        ->condition('field_product_goods', $term->field_product_id->target_id)
                                        ->condition('field_storage_id', $term->field_storage->target_id)
                                        ->execute();
    foreach($inventory_nids as $inventory_nid) {
        $material = \Drupal\node\Entity\Node::load($inventory_nid);
        if ( $term->field_sell_type->value == "return" ) {
            $before_quantity = $material->field_stock->value;
            $after_quantity = $before_quantity + $term->field_quantity->value;
            $material->set('field_stock', $after_quantity);
            $material->save();
            $message = get_product_name_by_nid($term->field_product_id->target_id) . " 退倉成功, 儲存在 " . get_storage_name_by_nid($term->field_storage->target_id) . " 的庫數量 " . $after_quantity; 
            \Drupal::messenger()->addMessage($message);
            create_warehouse_transaction_log($term->field_product_id->target_id, "", $term->field_storage->target_id, "return", $term->field_quantity->value, $before_quantity, $after_quantity, get_sell_order_number_by_nid($term->field_order_id->target_id), "");
        } else {
            //if ( $material->field_stock->value >= $term->field_quantity->value ) {
                $before_quantity = $material->field_stock->value;
                $after_quantity = $before_quantity - $term->field_quantity->value;
                $material->set('field_stock', $after_quantity);
                $material->save();
                $message = get_product_name_by_nid($term->field_product_id->target_id) . " 儲存在 " . get_storage_name_by_nid($term->field_storage->target_id) . " 的庫存剩餘 " . $after_quantity; 
                \Drupal::messenger()->addMessage($message);
                if ( $term->field_requisition_status->value == "transferred" ) {
                    create_warehouse_transaction_log($term->field_product_id->target_id, $term->field_storage->target_id, "", "transfer", $term->field_quantity->value, $before_quantity, $after_quantity, get_sell_order_number_by_nid($term->field_order_id->target_id), "");
                    $inventory_nids = \Drupal::entityQuery("node")
                                            ->condition('type', 'stock_up')
                                            ->condition('field_product_goods', $term->field_product_id->target_id)
                                            //->condition('field_storage_id', $term->field_temporary_storage->target_id)
                                            ->condition('field_storage_id', get_storage_nid_by_title($term->field_client_warehouse->value))
                                            ->execute();
                    if ( count( $inventory_nids) == 0 ) {
                        $inventory = \Drupal\node\Entity\Node::create(['type' => "stock_up",]);
                        //$inventory->set('field_storage_id', $term->field_temporary_storage->target_id);
                        $inventory->set('field_storage_id', get_storage_nid_by_title($term->field_client_warehouse->value));
                        $inventory->set('field_product_goods', $term->field_product_id->target_id);
                        $inventory->set('field_stock', 0);
                        $inventory->save();
                        //$message = get_product_name_by_nid($term->field_product_id->target_id) . " 不存在寄存倉庫. 以在寄存倉庫 " . get_storage_name_by_nid($term->field_temporary_storage->target_id) . " 建立此物品."; 
                        $message = get_product_name_by_nid($term->field_product_id->target_id) . " 不存在寄存倉庫. 以在寄存倉庫 " .$term->field_client_warehouse->value . " 建立此物品."; 
                        \Drupal::messenger()->addMessage($message);
                        $inventory_nids[] = $inventory->id();
                    }
                    foreach($inventory_nids as $inventory_nid) {
                        $temp_inventory = \Drupal\node\Entity\Node::load($inventory_nid);
                        $before_quantity = $temp_inventory->field_stock->value;
                        $after_quantity =  $before_quantity + $term->field_quantity->value;
                        $temp_inventory->set('field_stock', $after_quantity);
                        $temp_inventory->save();
                        //$message = get_product_name_by_nid($term->field_product_id->target_id) . " 寄存在 " . get_storage_name_by_nid($term->field_temporary_storage->target_id) . " 的庫存數量 " . $after_quantity; 
                        $message = get_product_name_by_nid($term->field_product_id->target_id) . " 寄存在 " . $term->field_client_warehouse->value . " 的庫存數量 " . $after_quantity; 
                        \Drupal::messenger()->addMessage($message);
                        //create_warehouse_transaction_log($term->field_product_id->target_id, "", $term->field_temporary_storage->target_id, "transfer", $term->field_quantity->value, $before_quantity, $after_quantity, get_sell_order_number_by_nid($term->field_order_id->target_id), "");
                        create_warehouse_transaction_log($term->field_product_id->target_id, "", get_storage_nid_by_title($term->field_client_warehouse->value), "transfer", $term->field_quantity->value, $before_quantity, $after_quantity, get_sell_order_number_by_nid($term->field_order_id->target_id), "");
                        break;
                    }
                } else {
                    create_warehouse_transaction_log($term->field_product_id->target_id, $term->field_storage->target_id, "", "outbound", $term->field_quantity->value, $before_quantity, $after_quantity, get_sell_order_number_by_nid($term->field_order_id->target_id), "");
                }
            //} else {
            //    $message = get_product_name_by_nid($term->field_product_id->target_id) . " 儲存在 " . get_storage_name_by_nid($term->field_storage->target_id) . " 的庫存剩餘 " . $remain_num . " 不足, 儲存失敗"; 
            //    \Drupal::messenger()->addMessage($message, 'error');
            //    $term->set('field_requisition_status', "");
                //throw new \Exception($message);
            //}
        }
        break;
    } 
}

/**
 * calculte the gross profit margin for sell item.
 *
 * @param float $price - sale price
 * @param float $discount - discount
 * @param float $cost - 成本價
 * @return float - gross profit margin
 */
function calculate_gross_profit_margin_for_each_sell($price, $discount, $cost) {
    return ($price * ( 1 - ($discount/100)) - $cost) / ( $price * (1- ($discount/100)));
}

